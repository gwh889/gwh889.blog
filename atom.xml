<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人学习博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-21T06:00:57.008Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>GWH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基础</title>
    <link href="http://example.com/2022/02/11/js/"/>
    <id>http://example.com/2022/02/11/js/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-11-21T06:00:57.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6 除了添加<code>let</code>和<code>const</code>命令，还有另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在 Node 指的是<code>global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><h3 id="1-数组的解构赋值"><a href="#1-数组的解构赋值" class="headerlink" title="1.数组的解构赋值"></a>1.数组的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构），那么将会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p><h3 id="2-对象的解构赋值"><a href="#2-对象的解构赋值" class="headerlink" title="2.对象的解构赋值"></a>2.对象的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>:fooNew, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">fooNew <span class="comment">//&quot;aaa&quot;  赋别名</span></span><br></pre></td></tr></table></figure><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p><p>注意，对象的解构赋值可以取到继承的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo &#125; = obj1;</span><br><span class="line">foo <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，对象<code>obj1</code>的原型对象是<code>obj2</code>。<code>foo</code>属性不是<code>obj1</code>自身的属性，而是继承自<code>obj2</code>的属性，解构赋值可以取到这个属性。</p><p>注意：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure><p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>&#123;x&#125;</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><p>还有字符串的解构赋值、函数参数解构赋值、数值和布尔值解构赋值。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>ES6 为字符串添加了遍历器接口，使得字符串可以被<code>for...of</code>循环遍历。这个遍历器最大的优点是可以识别大于<code>0xFFFF</code>的码点（Unicode)，传统的<code>for</code>循环无法识别这样的码点。</p><h3 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1.模板字符串"></a>1.模板字符串</h3><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`User <span class="subst">$&#123;user.name&#125;</span> is not authorized to do <span class="subst">$&#123;action&#125;</span>.`</span>)</span><br></pre></td></tr></table></figure><h3 id="2-模板编译"><a href="#2-模板编译" class="headerlink" title="2.模板编译"></a>2.模板编译</h3><h3 id="3-标签模板"><a href="#3-标签模板" class="headerlink" title="3.标签模板"></a>3.标签模板</h3><h3 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h3><h4 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h4><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">&#x27;world&#x27;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">3</span>) <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.repeat(<span class="number">2</span>) <span class="comment">// &quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.repeat(<span class="number">0</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p><h4 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h4><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padStart(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&#x27;xxx&#x27;</span>.padEnd(<span class="number">2</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;0123456789&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;0123456abc&#x27;</span></span><br></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p><h2 id="Flat"><a href="#Flat" class="headerlink" title="Flat"></a>Flat</h2><p>Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat(); <span class="comment">//默认只展开一层</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>);<span class="comment">//展开两层</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>);<span class="comment">//不管多少层，都会展开</span></span><br><span class="line"><span class="comment">//如果数组有空位，会跳过</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><p>原理是递归</p><h2 id="null是Object"><a href="#null是Object" class="headerlink" title="null是Object?"></a>null是Object?</h2><p>null作为一个基本数据类型为什么会被typeof运算符识别为Object类型呢？是因为javascript中不同对象在底层都表示为二进制，而javascript中会把二进制的前三位都为0的判断为Object类型，而null的二进制表示全都是0，自然前三位也是0，所以执行typeof时会返回object，null被认为是对一个空对象的引用。</p><h2 id="js判断数据类型的几种方法？"><a href="#js判断数据类型的几种方法？" class="headerlink" title="js判断数据类型的几种方法？"></a>js判断数据类型的几种方法？</h2><h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h3><p>适合判断基础数据类型，判断引用类型的话基本上返回的都是Object;</p><h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h3><p>instanceof检测的是原型，A instanceof B，如果A是B的实例，则返回true,否则返回false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; instanceof Object</span><br><span class="line">[] instanceof Array</span><br></pre></td></tr></table></figure><h3 id="3-Object-prototype-toString"><a href="#3-Object-prototype-toString" class="headerlink" title="3.Object.prototype.toString"></a>3.Object.prototype.toString</h3><p>toString是Object原型对象上的一个方法，该方法默认返回其调用者的具体类型，更严格的讲，是 toString运行时this指向的对象类型, 返回的类型格式为[object,xxx],xxx是具体的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">//[object Array]</span></span><br></pre></td></tr></table></figure><h2 id="js判断对象中是否有某属性"><a href="#js判断对象中是否有某属性" class="headerlink" title="js判断对象中是否有某属性"></a>js判断对象中是否有某属性</h2><h3 id="1-或"><a href="#1-或" class="headerlink" title="1.[]或."></a>1.[]或.</h3><p>通过点或者方括号可以获取对象的属性值，如果对象上不存在该属性，则会返回undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj =&#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line">obj.name <span class="comment">//tom</span></span><br><span class="line">obj[name] <span class="comment">//tom</span></span><br><span class="line">obj.age <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>不能用在x的属性值存在，但可能为 undefined的场景</p><h3 id="2-in运算符"><a href="#2-in运算符" class="headerlink" title="2.in运算符"></a>2.in运算符</h3><p>如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">in</span> obj <span class="comment">//true</span></span><br><span class="line">age <span class="keyword">in</span> obj <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>这种方式的局限性就是无法区分自身和原型链上的属性，在只需要判断自身属性是否存在时，这种方式就不适用了。这时需要hasOwnProperty()</p><h3 id="3-hasOwnProperty"><a href="#3-hasOwnProperty" class="headerlink" title="3.hasOwnProperty()"></a>3.hasOwnProperty()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>) <span class="comment">//true 自身属性</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>) <span class="comment">//false 不存在</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">//false 原型链上属性</span></span><br></pre></td></tr></table></figure><p>注意：for in循环会遍历原型链上的属性，为了解决此问题，可以通过hasOwnProperty判断是否是自身属性，再去操作。</p><h2 id="删除对象中的某一属性"><a href="#删除对象中的某一属性" class="headerlink" title="删除对象中的某一属性"></a>删除对象中的某一属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">name: <span class="string">&#x27;zhagnsan&#x27;</span>,</span><br><span class="line">age: <span class="number">19</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.name <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> obj.name <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h2 id="js判断数组中是否包含某个值"><a href="#js判断数组中是否包含某个值" class="headerlink" title="js判断数组中是否包含某个值"></a>js判断数组中是否包含某个值</h2><h3 id="1-indexOf-item-index"><a href="#1-indexOf-item-index" class="headerlink" title="1.indexOf.(item,index)"></a>1.indexOf.(item,index)</h3><p>此方法判断数组中是否存在某个值，如果存在，则返回数组元素的下标，否则返回-1。查找字符串最后出现的位置，使用 lastIndexOf() 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = fruits.indexOf(<span class="string">&quot;Apple&quot;</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//以上输出结果意味着 &quot;Apple&quot; 元素位于数组中的第 3 个位置。</span></span><br><span class="line"><span class="keyword">var</span> fruits=[<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;Mango&quot;</span>,<span class="string">&quot;Banana&quot;</span>,<span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Apple&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = fruits.indexOf(<span class="string">&quot;Apple&quot;</span>,<span class="number">4</span>); <span class="comment">//6</span></span><br><span class="line"><span class="comment">//以上输出结果意味在数组的第四个位置开始检索：</span></span><br></pre></td></tr></table></figure><h3 id="2-includes-item-index"><a href="#2-includes-item-index" class="headerlink" title="2.includes.(item,index)"></a>2.includes.(item,index)</h3><p>此方法判断数组中是否存在某个值，如果存在返回true，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">//false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="3-find"><a href="#3-find" class="headerlink" title="3.find()"></a>3.find()</h3><p>返回数组中满足条件的第一个元素的值，如果没有，返回undefined</p><p><strong>注意</strong>: find() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong>  find() 并没有改变数组的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="4-findeIndex"><a href="#4-findeIndex" class="headerlink" title="4.findeIndex()"></a>4.findeIndex()</h3><p>返回数组中满足条件的第一个元素的下标，如果没有找到，返回<code>-1</code></p><p>注意点与find相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line">ages.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value&gt;=<span class="number">18</span>;</span><br><span class="line">&#125;) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="5-filter"><a href="#5-filter" class="headerlink" title="5.filter()"></a>5.filter()</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><strong>注意：</strong>  filter() 不会对空数组进行检测。</p><p>**注意： ** filter() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">const</span> agesNew = ages.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value&gt;=<span class="number">18</span>;</span><br><span class="line">&#125;) <span class="comment">//[18,20]</span></span><br></pre></td></tr></table></figure><h3 id="6-some"><a href="#6-some" class="headerlink" title="6.some()"></a>6.some()</h3><p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。</p><p><strong>注意：</strong> some() 不会对空数组进行检测。</p><p><strong>注意：</strong> some() 不会改变原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">const</span> agesNew = ages.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value&gt;=<span class="number">18</span>;</span><br><span class="line">&#125;) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="js数组中删除某一个元素"><a href="#js数组中删除某一个元素" class="headerlink" title="js数组中删除某一个元素"></a>js数组中删除某一个元素</h2><h3 id="1-delete方法"><a href="#1-delete方法" class="headerlink" title="1.delete方法"></a>1.delete方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]; </span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">1</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;a&quot;, undefined, &quot;c&quot;, &quot;d&quot;] 数组长度不变，有一项为undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-splice方法"><a href="#2-splice方法" class="headerlink" title="2.splice方法"></a>2.splice方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除起始下标为1，长度为1的一个值(len设置1，如果为0，则数组不变)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[&#x27;a&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]; </span></span><br><span class="line">rr.splice(<span class="number">1</span>,<span class="number">1</span>,f);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[&#x27;a&#x27;,&#x27;f&#x27;,&#x27;d&#x27;];</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定元素而非指定位置</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="built_in">this</span>.indexOf(val);</span><br><span class="line">      <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.splice(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">arr.remove(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]; </span></span><br></pre></td></tr></table></figure><h2 id="数组中常用的方法"><a href="#数组中常用的方法" class="headerlink" title="数组中常用的方法"></a>数组中常用的方法</h2><p>1.push： 在数组的末尾添加一个或多个元素，并返回数组的新长度</p><p>2.pop： 删除数组末尾的元素，并返回数组的新长度。</p><p>3.unshift： 在数组的头部插入元素，,并返回数组的新长度</p><p>4.shift： 删除数组的头部元素，并返回删除的元素</p><p>5.concat： 数组和数组（或元素）的合并，返回新的数组，原数组不会改变</p><p>6.splice： 在数组中添加删除或替换元素，在任意位置添加或删除元素，返回删除或被替换的值，如果没有被删除或替换则返回空数组，splice()方法会修改原数组的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]；</span><br><span class="line"><span class="keyword">let</span> num1=arr.splice(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num1;arr)<span class="comment">//num1=[2,3,4,5];arr=[1];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1=arr.splice(<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//删除从索引值2开始的3个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(num1;arr);<span class="comment">// num1=[3,4,5],arr=[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2=arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);<span class="comment">//从索引值2开始替换掉1个元素，并且插入6,7,8</span></span><br><span class="line"><span class="comment">//如果第二个值为0，则不替换，直接插入6,7,8;</span></span><br><span class="line"><span class="built_in">console</span>.log(num2;arr);<span class="comment">//被替换的值num2=[3]; arr=[1,2,6,7,8,4,5]</span></span><br></pre></td></tr></table></figure><p>7.slice： 截取复制数组指定位置的内容，slice(开始位置，结束位置)；第二个参数不写默认到尾部，只能从前往后截取；返回的值为截取到的内容形成的新数组；slice()方法不会更改到原数组的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> copyArr=arr.slice(); <span class="comment">// slice()或者slice(0)都可以复制数组；</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]；</span><br><span class="line"><span class="keyword">let</span> newArr=arr.slice(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//截取索引1到索引3(不包括3)的值;</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr,arr)；<span class="comment">//newArr=[2,3];arr=[1,2,3,4,5];</span></span><br></pre></td></tr></table></figure><p>8.join： 指定字符连接字符串，默认用逗号连接</p><p>9.sort： sort()将数组进行排序(升序)，返回新数组，原数组也会改变;</p><p>不传递参数时，有时会失效，原因是：js数组的sort方法总会以第一个字符的ASCII值来进行比较排序，也就是按字母顺序对数组中的元素进行排序。</p><p>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</p><p>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。<br>若 a 等于 b，则返回 0。<br>若 a 大于 b，则返回一个大于 0 的值。</p><p>a-b输出从小到大排序，b-a输出从大到小排序</p><p>10.reverse： 可以将数组进行倒序，并返回新数组，原数组也会随之改变;</p><h2 id="生成1-10的连续整数的数组"><a href="#生成1-10的连续整数的数组" class="headerlink" title="生成1-10的连续整数的数组"></a>生成1-10的连续整数的数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用new Array生成一个长度是10的空数组</span></span><br><span class="line"><span class="comment">// 通过.key 返回带有数组下标索引的的 Array Iterator 对象</span></span><br><span class="line"><span class="comment">// Array.from 方法对一个类似数组（伪数组）或可迭代对象创建一个新的数组实例</span></span><br><span class="line"><span class="comment">// slice(0)只有一个参数，截取从0到数组末尾的数值</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span> + <span class="number">1</span>).keys()).slice(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><h3 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1.迭代器"></a>1.迭代器</h3><p>​        迭代器是一种特殊对象，它具有一些专门为迭代过程设计的专有接口，所有的迭代器对象都有一个next()方法，每次调用都返回一个结果对象。结果对象有两个属性： 一个是value，表示下一个将要返回的值；另一个是done，它是一个布尔类型的值，当没有更多可返回数据时返回true。迭代器还会保存一个内部指针，用来指向当前集合中值的位置，每调用一次next()方法，都会返回下一个可用的值</p><p>　　如果在最后一个值返回后再调用next()方法，那么返回的对象中属性done的值为true，属性value则包含迭代器最终返回的值，这个返回值不是数据集的一部分，它与函数的返回值类似，是函数调用过程中最后一次给调用者传递信息的方法，如果没有相关数据则返回undefined</p><p>迭代数据结构中的内容，一般用在数组、set/Map集合、类似数组对象、字符串，主要供for…of使用</p><p>for…in只能遍历key值，还会遍历出原型的循环；而for…of可以遍历key,value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.iterator表示唯一的迭代器，诸如对象，一般不需要有顺序，所以对象本身没有迭代器 </span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="comment">// set集合</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">let</span> setIt=set[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(setIt.next());</span><br><span class="line"><span class="comment">// Map集合</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&quot;id&quot;</span>,<span class="number">1</span>],[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">let</span> strIt=str[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(strIt.next());</span><br></pre></td></tr></table></figure><h3 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2.生成器"></a>2.生成器</h3><p>生成器是一种返回迭代器的函数，通过function关键字后的星号(*)来表示，函数中会用到新的关键字yield。星号可以紧挨着function关键字，也可以在中间添加一个空格</p><h4 id="可解决异步（同时解决异步的还有promise和async）"><a href="#可解决异步（同时解决异步的还有promise和async）" class="headerlink" title="可解决异步（同时解决异步的还有promise和async）"></a>可解决异步（同时解决异步的还有promise和async）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;生成器函数进入了&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it=<span class="built_in">this</span>.gen()</span><br><span class="line">it.next() <span class="comment">//1</span></span><br><span class="line">it.next() <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="异步加载实例"><a href="#异步加载实例" class="headerlink" title="异步加载实例"></a>异步加载实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时加载任务的作用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;显示进度动画&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadingData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;加载数据中。。。&#x27;</span> + ++x)</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(id)</span><br><span class="line">      it.next(&#123; <span class="attr">msg</span>: <span class="number">200</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;数据加载完毕，关闭动画&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">loadData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  preLoad()</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">yield</span> loadingData()</span><br><span class="line">  <span class="keyword">if</span> (res.msg == <span class="number">200</span>) &#123;</span><br><span class="line">    loaded()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="keyword">let</span> it = loadData()</span><br><span class="line"> it.next() <span class="comment">//显示进度动画  加载数据中。。。     数据加载完毕，关闭动画</span></span><br></pre></td></tr></table></figure><h4 id="yield返回值和传参"><a href="#yield返回值和传参" class="headerlink" title="yield返回值和传参"></a>yield返回值和传参</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line">  <span class="keyword">let</span> y = <span class="keyword">yield</span> <span class="built_in">console</span>.log(num + <span class="number">10</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;genY:&#x27;</span> + y)</span><br><span class="line">  <span class="keyword">let</span> z = <span class="keyword">yield</span> <span class="built_in">console</span>.log(y + <span class="number">10</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;genz:&#x27;</span> + z)</span><br><span class="line">  <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it1 = test()</span><br><span class="line">it1.next() <span class="comment">//20   genY:undefined  因为程序从右向左执行，一个yield只能执行等号右部分，没有赋值，下一个next才是给等号左侧的赋值</span></span><br><span class="line">it1.next(<span class="number">10</span>) <span class="comment">//20   genY:10    20</span></span><br><span class="line">it1.next(<span class="number">30</span>) <span class="comment">//20   genY:10    20  genz:30</span></span><br></pre></td></tr></table></figure><h4 id="生成器函数调生成器函数"><a href="#生成器函数调生成器函数" class="headerlink" title="生成器函数调生成器函数"></a>生成器函数调生成器函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">yield</span> *test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach不支持break"><a href="#forEach不支持break" class="headerlink" title="forEach不支持break"></a><strong>forEach不支持break</strong></h2><p>forEach并不支持break操作，使用break会导致报错。forEach跳出循环结合try catch操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]；</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">self,index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">    <span class="keyword">if</span> (self === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//报错</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>forEach中使用return不会报错，但rerutn并不会生效。如果我们真的要用return返回某个值，那就只能将return操作放在函数中，而不是forEach循环中，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">array, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _index;</span><br><span class="line">    array.forEach(<span class="function">(<span class="params">self, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (self === num) &#123;</span><br><span class="line">            _index = index;</span><br><span class="line">            <span class="comment">//return index; 无效</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">//输出几次？</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">//?</span></span><br></pre></td></tr></table></figure><p>代码其实只会执行一次，数组也不会被删除干净，这是因为forEach在遍历跑完回调函数后，会隐性让index自增。当第一次遍历结束，此时数组为[2]而index变成了1，此时数组最大索引只是0，不满足条件，所以跳出了循环。</p><table><thead><tr><th>方法名</th><th>break</th><th>return</th><th>continue</th><th>有无返回值</th></tr></thead><tbody><tr><td>for</td><td>跳出循环体</td><td>报错</td><td>结束本次循环</td><td>无</td></tr><tr><td>forEach</td><td>报错</td><td>结束本次循环</td><td>报错</td><td>无</td></tr><tr><td>map</td><td>报错</td><td>结束本次循环</td><td>报错</td><td>有</td></tr><tr><td>for…in</td><td>跳出循环体</td><td>报错</td><td>结束本次循环</td><td>无</td></tr><tr><td>for..of</td><td>跳出循环体</td><td>报错</td><td>结束本次循环</td><td>无</td></tr></tbody></table><h2 id="new对象发生了什么？"><a href="#new对象发生了什么？" class="headerlink" title="new对象发生了什么？"></a>new对象发生了什么？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Animate(name)&#123;</span><br><span class="line">      this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">Animate.prototype.dance &#x3D; function()&#123;</span><br><span class="line">      console.log(this.name + &quot;在跳舞！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var dog &#x3D; new Animate(&#39;小白&#39;);</span><br><span class="line">dog.dance();</span><br></pre></td></tr></table></figure><p>1.创建了一个空对象obj{}，克隆一个 js 的 Object.prototype 对象dog</p><p>2.将Animate中的this关键字指向obj(dog)</p><p>3.将Animate的prototype原型指向obj原型，dog.proto=Animate.prototype，这样obj就拥有了Animate中的方法.</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x=x;</span><br><span class="line">        <span class="built_in">this</span>.y=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__===Person.prototype)  <span class="comment">//true  _proto_是对象实例的隐式原型</span></span><br><span class="line"><span class="built_in">console</span>.log(p.z) <span class="comment">//undefined</span></span><br><span class="line">p.__proto__.z=<span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(p.z) <span class="comment">// 5 加在了p的原型上</span></span><br><span class="line">p.f=<span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(p.f) <span class="comment">// 6 加在了p的这个对象上</span></span><br><span class="line"><span class="comment">//constructor指向的就是构造函数本身</span></span><br><span class="line"><span class="built_in">console</span>(Person==Person.prototype.constructor) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person==p.__proto__.constructor) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><img src="/2022/02/11/js/image-20221102170434564.png" class="" title="这是一张图片"><h2 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h2><p>该函数对简单数据类型和引用数据类型都能实现深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cloneObj;</span><br><span class="line">        <span class="comment">//当输入数据为简单数据类型时直接复制</span></span><br><span class="line">        <span class="keyword">if</span>(obj&amp;&amp;<span class="keyword">typeof</span> obj!==<span class="string">&#x27;object&#x27;</span>)&#123;cloneObj=obj;&#125;</span><br><span class="line">        <span class="comment">//当输入数据为对象或数组时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(obj&amp;&amp;<span class="keyword">typeof</span> obj===<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//检测输入数据是数组还是对象</span></span><br><span class="line">            cloneObj=<span class="built_in">Array</span>.isArray(obj)?[]:&#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(obj[key]&amp;&amp;<span class="keyword">typeof</span> obj[key]===<span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//若当前元素类型为对象时，递归调用</span></span><br><span class="line">                        cloneObj[key] = copyObj(obj[key]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//若当前元素类型为基本数据类型</span></span><br><span class="line">                    <span class="keyword">else</span>&#123;cloneObj[key]=obj[key];&#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneObj;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-parse-JSON-stringfy"><a href="#JSON-parse-JSON-stringfy" class="headerlink" title="JSON.parse(JSON.stringfy())"></a>JSON.parse(JSON.stringfy())</h2><h4 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h4><p>用法简单，然而使用这种方法会有一些隐藏的坑：因为在序列化JavaScript对象时，所有函数和原型成员会被有意忽略。<br>通俗点说，<code>JSON.parse(JSON.stringfy(X))</code>，其中X只能是<code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Array</code>, 扁平对象，即那些能够被 JSON 直接表示的数据结构。</p><h2 id="类数组对象arguments和数组对象"><a href="#类数组对象arguments和数组对象" class="headerlink" title="类数组对象arguments和数组对象"></a>类数组对象arguments和数组对象</h2><p>相同点： </p><ul><li>都可用下标访问每个元素</li><li>都有length属性</li></ul><p>不同点： </p><ul><li><p>数组对象的类型是Array，类数组对象的类型是Object；</p></li><li><p>类数组对象不能直接调用数组API；</p></li><li><p>数组遍历可以用for in和for循环，类数组只能用for循环遍历；</p></li></ul><p>类数组对象转换为数组对象的方法</p><h3 id="1-Array-prototype-slice-call-arguments-（ES5写法）"><a href="#1-Array-prototype-slice-call-arguments-（ES5写法）" class="headerlink" title="1.Array**.prototype.slice.**call ( arguments )（ES5写法）"></a>1.Array**.<strong>prototype</strong>.<strong>slice</strong>.**call ( arguments )（ES5写法）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let newArray &#x3D; Array.prototype.slice.call(array); &#x2F;&#x2F;array是类数组对象</span><br></pre></td></tr></table></figure><h3 id="2-Array-from（ES6写法）"><a href="#2-Array-from（ES6写法）" class="headerlink" title="2.Array.from（ES6写法）"></a>2.Array.from（ES6写法）</h3><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>1.类数组对象必须具有length属性，用于指定数组的长度。如果没有length属性，那么转换后的数组是一个空数组。</p><p>2.类数组对象的属性名必须为数值型或字符串型的数字（该类数组对象的属性名可以加引号，也可以不加引号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&#x27;name&#x27;</span>, </span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;sex&#x27;</span>,　　　　<span class="comment">//注意这些属性名的类型  是数值型</span></span><br><span class="line">    <span class="number">3</span>: [<span class="string">&#x27;user1&#x27;</span>,<span class="string">&#x27;user2&#x27;</span>,<span class="string">&#x27;user3&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">4</span>     <span class="comment">//注意这里的length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(array )</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;,[&#x27;user1&#x27;,&#x27;user2&#x27;,&#x27;user3&#x27;]]</span></span><br></pre></td></tr></table></figure><h6 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h6><p>1.将Set解构的数据转换为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set))  <span class="comment">// [1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><p>2.Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set, <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)) <span class="comment">// [2,3,4,5,6,7,8,9,10]</span></span><br></pre></td></tr></table></figure><p>3.将字符串转换为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  str = <span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str)) <span class="comment">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot; &quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="3-扩展运算符"><a href="#3-扩展运算符" class="headerlink" title="3.扩展运算符"></a>3.扩展运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...argument]</span><br></pre></td></tr></table></figure><h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>在函数被触发的n秒内，如果又被触发，就会重新计时；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inp = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">inp.oninput = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(this);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(t)</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景： </p><ul><li>在input框中输入搜索内容的时候，浏览器不会马上就去执行，</li><li>手机号、邮箱输入验证；</li><li>窗口大小resize，只需要调整完成后，计算窗口大小，防止重复渲染</li></ul><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>每隔一段时间，只执行一次函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    fn.call(<span class="built_in">this</span>);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>滚动加载，加载更多或者滚到底部监听</li><li>频繁点击按钮</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">// 999</span></span><br><span class="line"><span class="comment">//f2函数就是闭包</span></span><br></pre></td></tr></table></figure><p>闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p><strong>闭包用途</strong></p><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p><p><strong>使用闭包的注意点</strong></p><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h2 id="在浏览器中输入URL后发生的过程"><a href="#在浏览器中输入URL后发生的过程" class="headerlink" title="在浏览器中输入URL后发生的过程"></a>在浏览器中输入URL后发生的过程</h2><p>整体流程： </p><p>　　1. DNS域名解析</p><p>　　2. 建立TCP连接</p><p>　　3. 发送HTTP请求</p><p>　　4. 服务器处理请求</p><p>　　5. 返回响应结果</p><p>　　6. 关闭TCP连接</p><p>　　7. 浏览器解析HTML</p><p>　　8. 浏览器布局渲染</p><p>使用的协议： </p><p>　　DNS、TCP、IP、OSPF(IP数据包在路由器中，路由选择协议)、ARP、HTTP</p><p>详细： </p><p>　　1. <strong>DNS域名解析</strong></p><p>　　　　在浏览器输入网址，其实就是要向服务器请求我们想要的页面内容，所以浏览器首先要确认的是域名所对应的服务器在哪里。</p><p>　　　　将域名解析成对应的服务器IP地址这项工作，是由DNS服务器来完成的。</p><p>　　　　客户端收到域名地址后，首先去找本地的hosts文件，检查在该文件中是否有相应的域名、IP对应关系，如果有，则向其IP地址发送请求，如果没有，再去找DNS服务器。</p><p>　　2. <strong>建立TCP连接</strong></p><p>　　　　三次握手： 请求连接（SYN数据包），确认信息（SYN/ACK数据包），握手结束（ACK数据包）</p><p>　　3. <strong>发起http请求</strong></p><p>　　　　与服务器建立了连接后，就可以向服务器发起请求了。</p><p>　　4. <strong>服务器处理请求</strong></p><p>　　　　服务器端收到请求后的由web服务器（准确说应该是http服务器）处理请求。</p><p>　　　　web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过web服务器返回给浏览器客户端。</p><p>　　5. <strong>返回响应结果</strong></p><p>　　　　在http里，有请求就会有响应，哪怕是错误信息。</p><p>　　　　在响应结果中都会有个一个http状态码，如200、301、404、500等。通过这个状态码可以知道服务器端的处理是否正常，并能了解具体的错误。</p><p>　　6. <strong>关闭TCP连接</strong></p><p>　　　　为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。四次挥手。</p><p>　　7. <strong>浏览器解析HTML</strong></p><p>　　　　浏览器需要加载解析的不仅仅是HTML，还包括CSS、JS。以及还要加载图片、视频等其他媒体资源。</p><p>　　　　浏览器通过解析HTML，生成DOM树，解析CSS，生成CSS规则树，然后通过DOM树和CSS规则树生成渲染树。</p><p>　　　　渲染树与DOM树不同，渲染树中并没有head、display为none等不必显示的节点。</p><p>　　8. <strong>浏览器布局渲染</strong></p><p>　　　　根据渲染树布局，计算CSS样式，即每个节点在页面中的大小和位置等几何信息。</p><p>　　　　HTML默认是流式布局的，CSS和js会打破这种布局，改变DOM的外观样式以及大小和位置。</p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>浏览器渲染页面的一般过程： </p><p>1.浏览器解析html源码，然后创建一个 DOM树。并行请求 css/image/js在DOM树中，每一个HTML标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。DOM树的根节点就是 documentElement，对应的是html标签。</p><p>2.浏览器解析CSS代码，计算出最终的样式数据。构建CSSOM树。对CSS代码中非法的语法它会直接忽略掉。解析CSS的时候会按照如下顺序来定义优先级：浏览器默认设置 &lt; 用户设置 &lt; 外链样式 &lt; 内联样式 &lt; html中的style。</p><p>3.DOM Tree + CSSOM –&gt; 渲染树（rendering tree）。渲染树和DOM树有点像，但是是有区别的。</p><p>DOM树完全和html标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如head、display:none的元素等。而且一大段文本中的每一个行在渲染树中都是独立的一个节点。渲染树中的每一个节点都存储有对应的css属性。</p><p>4.一旦渲染树创建好了，浏览器就可以根据渲染树直接把页面绘制到屏幕上。</p><p>以上四个步骤并不是一次性顺序完成的。如果DOM或者CSSOM被修改，以上过程会被重复执行。实际上，CSS和JavaScript往往会多次修改DOM或者CSSOM。</p><h2 id="js阻塞页面渲染"><a href="#js阻塞页面渲染" class="headerlink" title="js阻塞页面渲染"></a>js阻塞页面渲染</h2><p>虽然js都会阻塞DOM解析，但是浏览器对于内联script和外联script的渲染过程还是有一点点不同。内联js会阻塞DOM解析和渲染，直到js执行完成后，页面才会被渲染出来。外联js也会阻塞DOM解析和渲染，但是如果在外联script标签之前已经有DOM元素生成，则浏览器会优先渲染一次。我想这是因为浏览器不知道脚本的内容，因而碰到脚本时，只好先渲染页面，确保脚本能获取到最新的<code>DOM</code>元素信息，尽管脚本可能不需要这些信息。</p><p><a href="https://www.cnblogs.com/FHC1994/p/13162696.html">https://www.cnblogs.com/FHC1994/p/13162696.html</a></p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对<a href="http://lib.csdn.net/base/javascript">JavaScript</a>施加的安全限制。所谓同源是指，域名，协议，端口均相同（域名和域名对应的IP地址也是跨域）。</p><p>1.jsonp解决跨域</p><p>首先，我们假定向后端请求的地址是’<a href="https://www.baidu.com/s?wd=jsonp&amp;cb=show%E2%80%99,%E5%B9%B6%E4%B8%94%E7%9F%A5%E9%81%93(%E6%88%96%E7%BA%A6%E5%AE%9A)%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E2%80%99show">https://www.baidu.com/s?wd=jsonp&amp;cb=show’,并且知道(或约定)后端返回的数据是’show</a>({wd: “jsonp”,p: false,s:     [“jsonp”,“jsonp跨域”,“jsonp实现”]})’</p><ul><li>那么我们就需要定义一个show方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(data);<span class="comment">//这就是我们需要的数据</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后，我们要准备script标签，并且src为上述假定的url,并且按需插入这个script</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(data);<span class="comment">//这就是我们需要的数据</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> srcipt = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  script.src = <span class="string">&#x27;https://www.baidu.com/s?wd=jsonp&amp;cb=show&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.append(script);<span class="comment">//一插入即请求，请求就相当于执行了show这个函数，那么show函数是上面定义的，所以就得到了data</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span>文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/qq_17175013/article/details/88984206</span><br></pre></td></tr></table></figure><p>2.localStorage会跟cookie一样受到跨域的限制，会被document.domain影响</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">document.domain用来得到当前网页的域名。</span><br><span class="line">比如在百度（https://www.baidu.com）页面控制台中输入：</span><br><span class="line">alert(document.domain);              //&quot;www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">我们也可以给document.domain属性赋值，不过是有限制的，你只能赋成当前的域名或者一级域名。</span><br><span class="line">比如：</span><br><span class="line">alert(document.domain = &quot;baidu.com&quot;);     //&quot;baidu.com&quot;</span><br><span class="line">alert(document.domain = &quot;www.baidu.com&quot;); //&quot;www.baidu.com&quot;</span><br><span class="line">上面的赋值都是成功的，因为www.baidu.com是当前的域名，而baidu.com是一级域名。</span><br><span class="line"></span><br><span class="line">但是下面的赋值就会出来&quot;参数无效&quot;的错误：</span><br><span class="line">比如：</span><br><span class="line">alert(document.domain = &quot;qq.com&quot;);     //参数无效  报错</span><br><span class="line">alert(document.domain = &quot;www.qq.com&quot;); //参数无效  报错</span><br><span class="line">因为qq.com与baidu.com的一级域名不相同，所以会有错误出现。</span><br><span class="line">这是为了防止有人恶意修改document.domain来实现跨域偷取数据。</span><br><span class="line"></span><br><span class="line">利用document.domain 实现跨域</span><br><span class="line">前提条件：这两个域名必须属于同一个一级域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域。</span><br><span class="line">例如：</span><br><span class="line">news.baidu.com下的news.html页面：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">&#x27;baidu.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    ifr.src = <span class="string">&#x27;map.baidu.com/map.html&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    ifr.style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(ifr);</span></span><br><span class="line"><span class="javascript">    ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> doc = ifr.contentDocument || ifr.contentWindow.document;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里可以操作map.baidu.com下的map.html页面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oUl = doc.getElementById(<span class="string">&#x27;ul1&#x27;</span>);</span></span><br><span class="line">        alert(oUl.innerHTML);</span><br><span class="line"><span class="javascript">        ifr.onload = <span class="literal">null</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">map.baidu.com下的map.html页面：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span>我是map.baidu.com中的ul<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">&#x27;baidu.com&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.跨域存取localstorage</p><p>采用的是postMessage和iframe相结合的方法</p><p><a href="https://www.jianshu.com/p/e86d92aeae69">https://www.jianshu.com/p/e86d92aeae69</a></p><p>4.CORS(跨域资源共享)是一种新标准，支持同源通信，也支持跨域通信。fetch是实现CORS通信的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决跨域带上cookies</span></span><br><span class="line"><span class="number">1.</span>后端添加@CrossOrigin注解</span><br><span class="line"><span class="number">2.</span>前端设置允许发送cookie</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(obj),</span><br><span class="line">    <span class="comment">//加上 xhrFields及crossDomain</span></span><br><span class="line">    xhrFields: &#123; </span><br><span class="line">        withCredentials: <span class="literal">true</span><span class="comment">//允许带上cookies</span></span><br><span class="line">    &#125;,</span><br><span class="line">    crossDomain: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何计算一个html页面有多少种标签"><a href="#如何计算一个html页面有多少种标签" class="headerlink" title="如何计算一个html页面有多少种标签"></a>如何计算一个html页面有多少种标签</h2><p>这道题看似简单，但是是一个很有价值的一道题目。它包含了很多重要的知识：</p><ul><li>如何获取所有DOM节点</li><li>伪数组如何转为数组</li><li>去重</li></ul><p>那么针对这道题目我们来解答一下，就拿当前页面为例吧。</p><p>解答<br>1.获取所有的DOM节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时得到的是一个NodeList集合，我们需要将其转化为数组，然后对其筛选。</p><p>2.转化为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...document.querySelectorAll(&#39;*&#39;)]</span><br></pre></td></tr></table></figure><p>一个拓展运算符就轻松搞定。</p><p>3.获取数组每个元素的标签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...document.querySelectorAll(&#39;*&#39;)].map(ele &#x3D;&gt; ele.tagName)</span><br></pre></td></tr></table></figure><p>使用一个map方法，将我们需要的结果映射到一个新数组。</p><p>4.去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Set([...document.querySelectorAll(&#39;*&#39;)].map(ele&#x3D;&gt; ele.tagName)).size</span><br></pre></td></tr></table></figure><p>我们使用ES6中的Set对象，把数组作为构造函数的参数，就实现了去重，再使用Set对象的size方法就可以得到有多少种HTML元素了。</p><h2 id="sessionStorage、localStorage和cookie"><a href="#sessionStorage、localStorage和cookie" class="headerlink" title="sessionStorage、localStorage和cookie"></a><strong>sessionStorage、localStorage和cookie</strong></h2><p>共同点： 都是保存在浏览器端、且同源的<br>区别：<br>1、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>2、存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>3、数据有效期不同，sessionStorage： 仅在当前浏览器窗口关闭之前有效；localStorage： 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie： 只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭 ，默认是在浏览器关闭后失效。<br>4、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的 </p><h2 id="BFC块级格式化上下文"><a href="#BFC块级格式化上下文" class="headerlink" title="BFC块级格式化上下文"></a>BFC块级格式化上下文</h2><p>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><h2 id="修改Vuex中的state"><a href="#修改Vuex中的state" class="headerlink" title="修改Vuex中的state"></a>修改Vuex中的state</h2><p>直接修改state时，store中的state能够改变，并且是响应式的，并没有报错。跟commit提交mutation的方式没啥区别。</p><p>开启严格模式，仅需在创建 store 的时候传入 strict: true；在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</p><p>于是，将vuex设置成了严格模式。直接修改state发现控制台确实是报出了错误，但是state修改成功，并且依然是响应式的。错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do not mutate vuex store state outside mutation handlers.</span><br></pre></td></tr></table></figure><p>通过commit 提交 mutation 的方式来修改 state 时，vue的调试工具能够记录每一次state的变化，这样方便调试。但是如果是直接修改state，则没有这个记录。</p><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><p>三种事件模型 ： 原始事件模型（DOM0），DOM2事件模型，IE事件模型；</p><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><p>1.事件程序的注册</p><p>2.事件传播的过程</p><h3 id="一、原始事件模型"><a href="#一、原始事件模型" class="headerlink" title="一、原始事件模型"></a>一、原始事件模型</h3><p>1.特点： </p><p>事件类型上面有ON（onclick）</p><p>没有事件的传播(事件一旦发生就立刻调用事件句柄)</p><p>一个DOM对象只能注册一个类型的事件，如果注册了两个，则会发生覆盖，只执行后一个事件；</p><p>2.注册</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.将JS代码作为HTML的性质（也就是直接在标签中将HTML元素的性质设置为一段代码）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Press me&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;thanks&#x27;);&quot;</span> /&gt;</span> </span><br><span class="line">2.将事件处理程序作为js对象的属性</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mybtn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">let btn = document.getElementById(&#x27;mybtn&#x27;);</span><br><span class="line">btn.onclick=function(event)&#123;</span><br><span class="line">    console.log(&#x27;啦啦啦&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.解除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&#39;mybtn&#39;).onclick &#x3D; null;</span><br></pre></td></tr></table></figure><p>4.阻止默认动作：事件处理程序可以通过返回false来阻止浏览器的默认行为</p><h3 id="二、Dom2事件模型-IE8以下不支持"><a href="#二、Dom2事件模型-IE8以下不支持" class="headerlink" title="二、Dom2事件模型(IE8以下不支持)"></a>二、Dom2事件模型(IE8以下不支持)</h3><p>1.特点： 有一个事件传播的过程</p><p>事件捕获： 事件由document对象一直向下捕捉到目标元素</p><p>事件执行： 目标对象的事件处理程序执行</p><p>事件冒泡： 事件从目标元素上升到document</p><p>所有事件类型都会经历第一阶段，有的事件不会经历第三阶段</p><p>2.特点： 一个dom对象可以注册多个相同类型的事件，不会发生事件的覆盖，会依次的执行各个事件函数。</p><p>3.注册： [object].addEventListener(‘事件名称’，方法名（函数），事件模型（true/false）)</p><p>4.解除绑定： [object].removeEventListener(‘事件名称’，方法名（函数），事件模型（true/false）)</p><p> **true/false决定在那个阶段调用函数 **   true: 捕获               false: 冒泡</p><p>5.停止传播： event.stopPropagation()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> click = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;inner&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> clickouter = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;outer&#x27;</span>);</span><br><span class="line">click.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;inner show&#x27;</span>);</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">clickouter.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;outer show&#x27;</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>阻止默认动作： event.preventDefault()</p><p> <strong>由于事件捕获阶段没有可以阻止事件的函数，所以一般都是设置为事件冒泡。</strong></p><h3 id="三、IE事件模型"><a href="#三、IE事件模型" class="headerlink" title="三、IE事件模型"></a>三、IE事件模型</h3><p>1.特点： Event对象不是事件处理程序的函数参数，而是window的全局变量</p><p>2.事件传播过程只有冒泡阶段</p><p>3.注册： [object].attachEvent(“onclick”,click1)</p><p>4.解除： [object].detachEvent(“onclick”,click1)</p><p>5.停止传播： window.ecent.cancelBubble=true;</p><h2 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h2><p>重绘(repaint)： 当<strong>元素样式的改变不影响页面布局时</strong>，比如元素的<strong>颜色</strong>，浏览器将对元素进行的更新，称之为重绘。</p><p>回流(reflow)： 也叫做<strong>重排</strong>。当<strong>元素的尺寸或者位置发生了变化</strong>，就需要重新计算渲染树，这就是回流，比如元素的<strong>宽高</strong>、<strong>位置</strong>，浏览器会重新渲染页面，称为回流，又叫重排（layout）。</p><p><strong>关系： 回流必定会触发重绘，重绘不一定会触发回流。重绘的开销较小，回流的代价较高</strong>。</p><p><a href="https://blog.csdn.net/yiyueqinghui/article/details/107233565">https://blog.csdn.net/yiyueqinghui/article/details/107233565</a></p><h2 id="js事件循环"><a href="#js事件循环" class="headerlink" title="js事件循环"></a>js事件循环</h2><p>事件循环(event-loop)： 先同步再异步，异步中先微任务，在宏任务</p><p>宏任务： setTimeout，setInterval</p><p>微任务： Promise.then/catch，process.nextTick</p><p><a href="https://www.cnblogs.com/hyns/p/12392249.html">https://www.cnblogs.com/hyns/p/12392249.html</a></p><h2 id="js中this指针的改变"><a href="#js中this指针的改变" class="headerlink" title="js中this指针的改变"></a>js中this指针的改变</h2><p>1.apply： 第一个参数是this指向的新目标，第二个参数接受一个数组，里面是要传递的参数，相当于arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name : <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">say.spply(obj,[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>]);<span class="comment">//tom one two  效果一样</span></span><br></pre></td></tr></table></figure><p>2.call： 第一个参数是this指向的新目标，第二个级以后的参数是要传递的参数，以逗号隔开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say.call(obj,<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>);<span class="comment">//tom one two</span></span><br></pre></td></tr></table></figure><p>3.bind： bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color=<span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objectSaycolor=sayColor.bind(o);</span><br><span class="line"><span class="comment">//var objectSaycolor=sayColor.bind();</span></span><br><span class="line">objectSaycolor();<span class="comment">//blue</span></span><br></pre></td></tr></table></figure><h2 id="promise-all某一项执行失败"><a href="#promise-all某一项执行失败" class="headerlink" title="promise.all某一项执行失败"></a>promise.all某一项执行失败</h2><p>promise.all该方法是用于将多个promise实例，包装成一个新的promise实例，适用于多个异步任务都完成之后才执行某个回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)               <span class="comment">//[&#x27;成功了&#x27;, &#x27;success&#x27;]</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p3,p2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)      <span class="comment">// 失败了，打出 &#x27;失败&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1,p3,p2])</span><br></pre></td></tr></table></figure><p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p><p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p><h2 id="async-await和promise的区别"><a href="#async-await和promise的区别" class="headerlink" title="async/await和promise的区别"></a>async/await和promise的区别</h2><p>promise是ES6为实现异步回调，async/await是ES7的语法，写起来更像是同步代码，看起来比较简洁。async的本质是promise，async函数返回的是一个promise对象，那么async也可以通过.then调用，而async里return的值将会被当作参数传递给then回调。如果没有return语句，参数会赋值为undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAsyncOreder</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;then函数的参数&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">getAsyncOreder().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">打印顺序：<span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  then函数的参数</span><br></pre></td></tr></table></figure><p>await： 相当于promise中的then</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncTime</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            resolve(x)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> asyncTime(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;执行完成&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">asyncTest()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">打印顺序：<span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><p>await会阻塞后边代码的执行，函数遇到await会中断async的执行，也就是说asyncTest的控制权交给了asyncTime，所以代码的作用域从asyncTest跳到了全局作用域window，所以执行顺序变成了 2   4。</p><p>async函数是Generator 函数的语法糖 ，async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await；进一步说就是async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><h2 id="模态框拖拽"><a href="#模态框拖拽" class="headerlink" title="模态框拖拽"></a>模态框拖拽</h2><p>js鼠标移动事件：onmousemove</p><p>js鼠标点击：onmousedown</p><p>js鼠标松开：onmouseup</p><p>js鼠标移出：onmouseout</p><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p>实现继承，要先有一个父类，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="built_in">this</span>.name = name || <span class="string">&#x27;Animal&#x27;</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="built_in">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;正在睡觉！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;正在吃：&#x27;</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><p>核心：将父类的实例作为子类的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    age:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype.name = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal(); <span class="comment">//Cat通过prototype指向Animal函数</span></span><br><span class="line">Cat.prototype.constructor = Cat</span><br><span class="line"></span><br><span class="line"><span class="comment">//　Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name); <span class="comment">//Animal</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">&#x27;fish&#x27;</span>)); <span class="comment">//Animal正在吃：fish</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//Animal正在睡觉！</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.age); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改造后</span></span><br><span class="line"><span class="comment">//必须将要为子类新增的属性和方法放在new Animal()后</span></span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal(); <span class="comment">//Cat通过prototype指向Animal函数</span></span><br><span class="line">Cat.prototype.constructor = Cat</span><br><span class="line">Cat.prototype.name = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line">Cat.prototype.age = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name); <span class="comment">//cat</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">&#x27;fish&#x27;</span>)); <span class="comment">//cat正在吃：fish</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep()); <span class="comment">//cat正在睡觉！</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.age); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li><li>父类新增原型方法/原型属性，子类都能访问到</li><li>简单，易于实现</li></ol><p>缺点：</p><ol><li>要想为子类新增属性和方法，必须要在<code>new Animal()</code>这样的语句之后执行，不能放到构造器中</li><li>无法实现多继承</li><li>来自原型对象的所有属性被所有实例共享</li><li>创建子类实例时，无法向父类构造函数传参</li></ol><h3 id="2-构造继承"><a href="#2-构造继承" class="headerlink" title="2.构造继承"></a>2.构造继承</h3><p>构造函数继承的基本思想就是利用call或者apply把父类中通过this指定的属性和方法复制（借用）到子类创建的实例中。因为this对象是在运行时基于函数的执行环境绑定的。在全局中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。call 、apply方法可以用来代替另一个对象调用一个方法。</p><p>创建了一个新的实例对象，并且执行SubType里面的代码，而SubType里面用call调用了SuperTyep，也就是说把this指向改成了指向新的实例，所以就会把SuperType里面的this相关属性和方法赋值到新的实例上，而不是赋值到SupType上面。所有实例中就拥有了父类定义的这些this的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//继承了SuperType</span></span><br><span class="line"> SuperType.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">//&quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance2.colors); <span class="comment">//&quot;red,blue,green&quot; </span></span><br></pre></td></tr></table></figure><h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h3><p>组合继承有时候也叫伪经典继承，指的是将<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE&spm=1001.2101.3001.7020">原型链</a>和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式，其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样既通过在原型上定义方法实现了函数复用，又能保证每个实例都有它的自己的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.name=name;</span><br><span class="line"> <span class="built_in">this</span>.colors=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"> SuperType.call(<span class="built_in">this</span>,name);</span><br><span class="line"> <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype=<span class="keyword">new</span> SuperType(); <span class="comment">//原型上继承了SuperType的本身属性和原型</span></span><br><span class="line">SubType.prototype.constructor=SubType;</span><br><span class="line">SubType.prototype.sayAge=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1=<span class="keyword">new</span> SubType(<span class="string">&quot;zxf&quot;</span>,<span class="number">24</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);<span class="comment">//[&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;black&quot;]</span></span><br><span class="line">instance1.sayName();<span class="comment">//&quot;zxf&quot;</span></span><br><span class="line">instance1.sayAge();<span class="comment">//24</span></span><br><span class="line"><span class="keyword">var</span> instance2=<span class="keyword">new</span> SubType(<span class="string">&quot;jay&quot;</span>,<span class="number">36</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);<span class="comment">//[&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]</span></span><br><span class="line">instance2.sayName();<span class="comment">//&quot;jay&quot;</span></span><br><span class="line">instance2.sayAge();<span class="comment">//36</span></span><br></pre></td></tr></table></figure><p><strong>基本思想</strong>：supertype构造函数定义了两个属性，name和colors。supertype的原型定义了一个方法sayname()。subtype构造函数调用supertype时传入了name参数，紧接着又定义了它自己的属性age。然后将supertype的实例赋值给subtype的原型，然后又在该新原型上定义了方法sayage()。这样一来，就可以让两个不同的subtype实例既可以拥有属性–包括colors属性，又可以使用相同的方法。<br><strong>缺点</strong>：调用了两次supertype构造函数，一次在赋值subtype的原型时，一次在实例化子类时call调用，这次调用会屏蔽原型中的两个同名属性。</p><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h3><p>原型继承并没有使用严格意义上的构造函数，是通过借助原型基于已有的对象创建的新对象，同时还不必创建自定义类型。使用原型继承的思路：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Object函数的内部先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype=o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1：</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">name:<span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">friends:[<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> anotherPerson=<span class="built_in">Object</span>(person);</span><br><span class="line">anotherPerson.name=<span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson=<span class="built_in">Object</span>(person);</span><br><span class="line">yetAnotherPerson.name=<span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">&quot;000&quot;</span>);</span><br><span class="line"> </span><br><span class="line">alert(person.friends); <span class="comment">//111,222,333,aaa,000</span></span><br></pre></td></tr></table></figure><p>克洛克福德主张这种原型式继承，要求你必须有一个对象可以作为另一个对象的基础。在代码1中，可以作为另一个对象的基础的是person对象，于是我们可以把它传入到object()函数中，然后该函数就会返回一个新对象</p><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create( )"></a><strong>Object.create( )</strong></h4><p>ECMAScript5新增Object.create( )方法规范了原型式继承。该方法接收了两个参数：一个用作新对象原型的对象和(可选)一个为新对象定义额外属性的对象。在传入一个参数的情况下Object.create( )和object( )方法的行为相同。如果传入两个参数，则Object.create( )的第二个参数与Object.defineProperties( )方法的第二个参数的格式相同：每个属性都是通过自己的描述符定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherPerson=<span class="built_in">Object</span>(person);   =&gt;   <span class="keyword">var</span> anotherPerson=<span class="built_in">Object</span>.create(person);</span><br></pre></td></tr></table></figure><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h3><p>寄生式继承就是创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，后再像真的是它做了所有工作一样返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="built_in">Object</span>(o) <span class="comment">//通过调用上边说的Object函数创建新的对象</span></span><br><span class="line">    clone.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//以某种方式来增强对象</span></span><br><span class="line">    alert(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createAnother()函数接收了一个参数，也就是将要作为新对象基础的对象。然后，把这个对象（original）传递给 object()函数，将返回的结果赋值给 clone。再为 clone 对象 添加一个新方法 sayHi()，后返回 clone 对象。可以像下面这样来使用 createAnother()函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;     </span><br><span class="line">name: <span class="string">&quot;Nicholas&quot;</span>,     </span><br><span class="line">friends: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>] </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> anotherPerson = createAnother(person); </span><br><span class="line">anotherPerson.sayHi(); <span class="comment">//&quot;hi&quot; </span></span><br></pre></td></tr></table></figure><h3 id="6-寄生组合继承"><a href="#6-寄生组合继承" class="headerlink" title="6.寄生组合继承"></a>6.寄生组合继承</h3><p>所谓寄生组合式继承，即通过借用<a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">构造函数</a>来继承属性，通过原型链的混成形式来继承方法。其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p><p>一、定义父类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.category = <span class="string">&#x27;human&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.legNum = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi,i am &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、定义继承方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在new inheritFn 的时候将构造函数指向子类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inheritFn</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.constructor = subType&#125;</span><br><span class="line">    inheritFn.prototype = superType.prototype;  <span class="comment">// 不写的话subType.prototype指向的是inheritFn</span></span><br><span class="line">    <span class="comment">//将子类的原型指向父类原型的一个副本</span></span><br><span class="line">    subType.prototype = <span class="keyword">new</span> inheritFn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、定义子类并实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义子类构造函数Pan</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pan</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="built_in">this</span>,name);  <span class="comment">//借用构造函数</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将子类Pan的原型指向父类Person原型的一个副本</span></span><br><span class="line"><span class="comment">//注意：要执行该动作后才能在Pan的prototype上定义方法，否则没用</span></span><br><span class="line">inherit(Pan,Person); </span><br><span class="line"> </span><br><span class="line">Pan.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定义子类构造函数Duan</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Duan</span>(<span class="params">name,hairColor</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.hairColor = hairColor;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">inherit(Duan,Person);</span><br><span class="line"> </span><br><span class="line">Duan.prototype.showHairColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.hairColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、结果输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pan的实例</span></span><br><span class="line"><span class="keyword">var</span> pan = <span class="keyword">new</span> Pan(<span class="string">&#x27;panfengshan&#x27;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pan.name); <span class="comment">//panfengshan</span></span><br><span class="line"><span class="built_in">console</span>.log(pan.age); <span class="comment">//27</span></span><br><span class="line"><span class="built_in">console</span>.log(pan.category); <span class="comment">//human</span></span><br><span class="line"><span class="built_in">console</span>.log(pan.legNum); <span class="comment">//2</span></span><br><span class="line"> </span><br><span class="line">pan.sayHello(); <span class="comment">//Hi,i am panfengshan</span></span><br><span class="line">pan.sayAge(); <span class="comment">//27</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Duan的实例</span></span><br><span class="line"><span class="keyword">var</span> duan = <span class="keyword">new</span> Duan(<span class="string">&#x27;duanyanan&#x27;</span>,<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(duan.name); <span class="comment">//duanyanan</span></span><br><span class="line"><span class="built_in">console</span>.log(duan.hairColor); <span class="comment">//black</span></span><br><span class="line"><span class="built_in">console</span>.log(pan.category); <span class="comment">//human</span></span><br><span class="line"><span class="built_in">console</span>.log(pan.legNum); <span class="comment">//2</span></span><br><span class="line"> </span><br><span class="line">duan.sayHello(); <span class="comment">//Hi,i am duanyanan</span></span><br><span class="line">duan.showHairColor(); <span class="comment">//black</span></span><br></pre></td></tr></table></figure><p>寄生组合式继承的高效体现在它只调用了一次Person构造函数，并且因此避免了在Pan.prototype上面创建不必要的、多余属性。与此同时，<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE&spm=1001.2101.3001.7020">原型链</a>还能保持不变；因此，还能正常使用instanceof和isPropertyOf()。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p><h3 id="7-ES6-class类继承"><a href="#7-ES6-class类继承" class="headerlink" title="7.ES6 class类继承"></a>7.ES6 class类继承</h3><p>ES6引入了Class语法糖，使得Js继承更像面向对象语言的写法。Class可以通过extends关键字来实现继承，这比ES5的通过修改原型链继承，要清晰和方便很多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于两个类里边什么都没写，相当于Son是复制了Father，两个类完全一样</span></span><br></pre></td></tr></table></figure><p>子类必须在constructor中调用super()，否则新建实例会报错，这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其加工，如果不调用super()，子类就得不到this对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Son()</span><br><span class="line"><span class="comment">//referenceError : this is not defined</span></span><br></pre></td></tr></table></figure><p>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上（Parent.apply(this)）,ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法）,然后再用子类的构造函数修改this；<br>如果子类没有定义constructor方法，这个方法会默认添加，也就是说，不管有没有显式定义，任何一个子类都有constructor方法。constructor中的属性和方法是实例对象上的，其外的是类原型上的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params">x,y</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.x= x;</span><br><span class="line">      <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params">x, y, color</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.color =color ;<span class="comment">//ReferenceError : this is not defined</span></span><br><span class="line">       <span class="built_in">super</span>(x,y);</span><br><span class="line">       <span class="built_in">this</span>.color = color;<span class="comment">//正确</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>super关键字</strong></p><p>既可以当函数使用，也可以当对象使用</p><p>（1）当对函数使用，代表的是父类的构造函数，ES6要求，子类的构造函数必须执行一个super()函数。super虽然代表了父类的构造函数，但是返回的是子类Son的实例，即super内部的this指向 的是Son，因此super()在这里相当于Father.constructor.call(this)。作为函数使用时，super()只能用在子类的构造器中，在其它地方会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">     <span class="title">constructor</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span>.target.name);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">new</span> A()<span class="comment">//A</span></span><br><span class="line"> <span class="keyword">new</span> B()<span class="comment">//B</span></span><br><span class="line"><span class="comment">//new.target指向当前正在执行的函数，在super()执行时，他指向的是子类B的构造函数，而不是父类A的构造函数，super()内部的this指向的是B；</span></span><br></pre></td></tr></table></figure><p>（2）作为对象使用时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类</p><p><strong>普通方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// super指向父类原型</span></span><br><span class="line"><span class="comment">//定义在了父类的原型上的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">super</span>.getName()) <span class="comment">//Bob</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s =<span class="keyword">new</span> Son()</span><br><span class="line"><span class="comment">//定义在父类实例（非原型上）的属性和方法是无法访问的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.p=<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">m</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Son();</span><br><span class="line">s.m  <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//定义在原型的变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.p=<span class="number">2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">m</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Son();</span><br><span class="line">s.m  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>ES6 规定，通过super调用父类的方法时，super会绑定子类的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.x =<span class="number">1</span>;<span class="comment">//这个this指向的是Father对象的实例</span></span><br><span class="line">   &#125;</span><br><span class="line">   print () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="built_in">super</span>();</span><br><span class="line">       <span class="built_in">this</span>.x = <span class="number">2</span>;<span class="comment">//这个this指向的是Son对象的实例</span></span><br><span class="line">   &#125;</span><br><span class="line">     <span class="function"><span class="title">m</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.print();   </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Son();</span><br><span class="line">s.m(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>super.print()虽然调用的是Father.prototype.print()，但是Father.prototype.print()会绑定子类Son的this，导致输出的是2，而不是1，也就是说，实际上执行的是 super.print.call(this)。</p><p><strong>静态方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用static声明的方法是在 Parent实例对象的原型的constructor上</span></span><br><span class="line">      <span class="keyword">static</span> myMethod (msg) &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&quot;static&quot;</span>,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//普通方法声明的是在 Parent实例对象的原型</span></span><br><span class="line">      myMethod (msg) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;instance&quot;</span> ,msg);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Parent()</span><br><span class="line"><span class="built_in">console</span>.log(Parent.myMethod(<span class="number">1</span>)) <span class="comment">// static 1</span></span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__.constructor.myMethod(<span class="number">1</span>)) <span class="comment">// static 1</span></span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__.myMethod(<span class="number">1</span>)) <span class="comment">// instance 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="function"><span class="title">myMethod</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">super</span>.myMethod(msg);</span><br><span class="line">     &#125;</span><br><span class="line">      myMethod (msg) &#123;</span><br><span class="line">          <span class="built_in">super</span>.myMethod(msg);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line">Child.myMethod(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//static 1</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.myMethod(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//instance 2</span></span><br></pre></td></tr></table></figure><p>super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</p><p><strong>类的prototype属性和proto属性</strong></p><p>大多数浏览器的ES5实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性，class作为构造函数的<a href="https://so.csdn.net/so/search?q=%E8%AF%AD%E6%B3%95%E7%B3%96&spm=1001.2101.3001.7020">语法糖</a>，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链；<br>（1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类；<br>（2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;p&gt;ES5 只有两种声明变量的方法：&lt;code&gt;var&lt;/code&gt;命令和&lt;code&gt;function&lt;/code&gt;命令。ES6 除了添</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>2021前端面试题</title>
    <link href="http://example.com/2021/12/13/2021%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2021/12/13/2021%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2021-12-12T16:00:00.000Z</published>
    <updated>2022-10-13T03:18:30.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h1><p>1.以下操作输出了什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.pop();</span><br><span class="line">arr.concat([<span class="number">6</span>,<span class="number">7</span>]);</span><br><span class="line">arr.push(<span class="number">8</span>);</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr); </span><br><span class="line"><span class="comment">//结果：[8, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment">//因为concat返回的是一个新的数组，原数组不会改变</span></span><br></pre></td></tr></table></figure><p>2.方法 test()和obj.test() 输出什么？为什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">&#x27;scope&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = obj.test;</span><br><span class="line">test();  <span class="comment">// global</span></span><br><span class="line">obj.test(); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure><p>3.使用快速排序对下列数组进行排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">89</span>,<span class="number">632</span>];</span><br></pre></td></tr></table></figure><p>原理： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在一个数集中，选择一个元素作为”基准“</span><br><span class="line">2.所有小于“基准”的元素，都移动到”基准“的左边；所有大于”基准“的元素，都移动到”基准“的右边</span><br><span class="line">3.对“基准”的左边和右边两个子集，不断重复上边的第一步和第二步，直到所有子集的元素只剩下一个为止。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">89</span>, <span class="number">632</span>];</span><br><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 将基准与原数组分离</span></span><br><span class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> left = [];</span><br><span class="line">  <span class="keyword">var</span> right = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.冒泡排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&lt;arr[i])&#123;</span><br><span class="line">        <span class="keyword">let</span> value = arr[i]</span><br><span class="line">        arr[i]=arr[j]</span><br><span class="line">        arr[j]=value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.同步、异步，微任务、宏任务</p><p>js是单线程执行的，js中的任务按照从上到下的顺序依次执行，单如果一个任务需要消耗太长的时间，那后边的任务就需要等待，为了解决这种情况，将任务分为了同步和异步。而异步又分为了微任务和宏任务。</p><p>宏任务：  setTimeout、setInterval、js主代码、setImmediate(Node)、requestAnimationFrame(浏览器)</p><p>微任务：  process.nextTick、Promise的then方法</p><p>执行过程：  同步-&gt;异步-&gt;微任务-&gt;宏任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>); <span class="comment">//同步</span></span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出结果：1,7,6,8,2,4,3,5,9,11,10,12</span></span><br></pre></td></tr></table></figure><p>6.实现：  有5个灯，5个灯随机亮，不知道亮哪个，但是亮的次数相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个随机数的问题，因为生成一定范围内的随机数的概率是相同的，根据生成的随机，去选择让哪个灯变亮</span></span><br><span class="line"><span class="keyword">let</span> count1=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> count2=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> count3=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> count4=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> count5=<span class="number">0</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">1</span>,<span class="number">16</span>)) + <span class="number">1</span>; <span class="comment">//生成1-16之间的随机整数，不包含16</span></span><br><span class="line">    <span class="keyword">if</span>(x===<span class="number">1</span>||x===<span class="number">2</span>||x===<span class="number">3</span>)&#123;</span><br><span class="line">     count1++ <span class="comment">//变成让第一个灯亮的操作，下边的判断也是如此</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x===<span class="number">4</span>||x===<span class="number">5</span>||x===<span class="number">6</span>)&#123;</span><br><span class="line">     count2++</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x===<span class="number">7</span>||x===<span class="number">8</span>||x===<span class="number">9</span>)&#123;</span><br><span class="line">     count3++</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x===<span class="number">10</span>||x===<span class="number">11</span>||x===<span class="number">12</span>)&#123;</span><br><span class="line">     count4++</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     count5++</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count1,count2,count3);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>7.一共有9个球，给你一个天枰，其中有一个球的质量和其他球不一样，怎样快速找到这个球？（假设这个球的质量偏高）</p><p>最优的方法： 每三个一组，拿两组放在天枰上找到偏重的那一组，然后再把偏重的那一组里的两个拿到天枰上进行称重，就可以找到偏重的那个球，一共需要两步</p><p>8.链表</p><p>9.给定一颗二叉树，根节点是1，第二层是2和3，第三层是4，5，6，7，请遍历这个二叉树，并按照1，2，3，4，5，6，7的顺序输出结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tree = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      value: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      value: <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> levelOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Empty Tree&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> que = [];</span><br><span class="line">  que.push(node);</span><br><span class="line">  <span class="keyword">while</span> (que.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    node = que.shift();</span><br><span class="line">    <span class="built_in">console</span>.log(node.value);</span><br><span class="line">    <span class="keyword">if</span> (node.left) que.push(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.right) que.push(node.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">levelOrderTraversal(tree)</span><br></pre></td></tr></table></figure><p>10.补充find函数，实现链式调用</p><p>方法一：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">dataList</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> query = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     query.where = <span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">condition</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> conditionKeys = <span class="built_in">Object</span>.keys(condition);</span><br><span class="line">       dataList = dataList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> conditionKeys.every(<span class="function"><span class="params">key</span> =&gt;</span> condition[key].test(item[key]))</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> query;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     query.orderBy = <span class="function"><span class="keyword">function</span> <span class="title">orderBy</span>(<span class="params">key, direction</span>) </span>&#123;</span><br><span class="line">       dataList.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> direction === <span class="string">&quot;desc&quot;</span> ? b[key] - a[key] : a[key] - b[key];</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> dataList;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">return</span> query;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> data = [</span><br><span class="line">     &#123; <span class="attr">userId</span>: <span class="number">8</span>, <span class="attr">title</span>: <span class="string">&quot;title1&quot;</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">userId</span>: <span class="number">11</span>, <span class="attr">title</span>: <span class="string">&quot;other&quot;</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">userId</span>: <span class="number">15</span>, <span class="attr">title</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">userId</span>: <span class="number">19</span>, <span class="attr">title</span>: <span class="string">&quot;title2&quot;</span> &#125;</span><br><span class="line">   ];</span><br><span class="line">   <span class="comment">// 查找data中，符合where中条件的数据，并根据orderBy中的条件进行排序</span></span><br><span class="line">   <span class="keyword">var</span> result = find(data)</span><br><span class="line">     .where(&#123;</span><br><span class="line">       title: <span class="regexp">/\d$/</span> <span class="comment">//过滤出数组中，满足title字段中符合/\d$/的项</span></span><br><span class="line">     &#125;)</span><br><span class="line">     .orderBy(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;desc&quot;</span>); <span class="comment">//数组中的项按照userId进行倒序排列</span></span><br><span class="line">   <span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>方法二：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">dataList</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataList = dataList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    where (conditions) &#123;</span><br><span class="line">        <span class="keyword">const</span> keyList = <span class="built_in">Object</span>.keys(conditions)</span><br><span class="line">        <span class="keyword">const</span> dataList = <span class="built_in">this</span>.dataList.filter(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> keyList.every(<span class="function"><span class="params">k</span> =&gt;</span> conditions[k].test(data[k]))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Query(dataList)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">orderBy</span>(<span class="params">key, orderType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> func = <span class="function">(<span class="params">a, b</span>) =&gt;</span> (a[key] - b[key]) * (orderType == <span class="string">&#x27;desc&#x27;</span> ? -<span class="number">1</span> : <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">const</span> list = [...this.dataList].sort(func)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Query(list)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span> (<span class="params">dataList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Query(dataList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123; <span class="attr">userId</span>: <span class="number">8</span>, <span class="attr">title</span>: <span class="string">&quot;title1&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">userId</span>: <span class="number">11</span>, <span class="attr">title</span>: <span class="string">&quot;other&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">userId</span>: <span class="number">15</span>, <span class="attr">title</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">userId</span>: <span class="number">19</span>, <span class="attr">title</span>: <span class="string">&quot;title2&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 查找data中，符合where中条件的数据，并根据orderBy中的条件进行排序</span></span><br><span class="line"><span class="keyword">var</span> result = find(data)</span><br><span class="line">  .where(&#123;</span><br><span class="line">    title: <span class="regexp">/\d$/</span> <span class="comment">//过滤出数组中，满足title字段中符合/\d$/的项</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .orderBy(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;desc&quot;</span>); <span class="comment">//数组中的项按照userId进行倒序排列</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端面试题&quot;&gt;&lt;a href=&quot;#前端面试题&quot; class=&quot;headerlink&quot; title=&quot;前端面试题&quot;&gt;&lt;/a&gt;前端面试题&lt;/h1&gt;&lt;p&gt;1.以下操作输出了什么？&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>cdn打包优化</title>
    <link href="http://example.com/2021/07/20/cdn%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2021/07/20/cdn%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:16:51.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cdn打包优化"><a href="#cdn打包优化" class="headerlink" title="cdn打包优化"></a>cdn打包优化</h2><p>首先需要在index.html文件中通过<a href="https://www.bootcdn.cn/%E7%BD%91%E7%AB%99%E6%9F%A5%E6%89%BE%E9%A1%B9%E7%9B%AE%E6%89%80%E8%A6%81%E5%BC%95%E5%85%A5%E7%9A%84%E5%8C%85%E6%96%87%E4%BB%B6%EF%BC%8C%E9%80%9A%E8%BF%87%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E5%BC%95%E5%85%A5%EF%BC%8C%E5%86%8D%E5%9C%A8vue.config.js%E4%B8%AD%E5%86%99%E5%85%A5%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%A4%BA%E4%BE%8B%EF%BC%9A">https://www.bootcdn.cn/网站查找项目所要引入的包文件，通过外部引入的方式引入，再在vue.config.js中写入以下代码，示例：</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">  <span class="comment">// outputDir: &#x27;ribbon&#x27;,</span></span><br><span class="line">  <span class="comment">// assetsDir: &#x27;static&#x27;,</span></span><br><span class="line">  configureWebpack:&#123;</span><br><span class="line">    <span class="comment">// 此处可以配置cdn的一些资源</span></span><br><span class="line">    <span class="comment">// 需要在index.html中引入cdn资源文件</span></span><br><span class="line">    externals:&#123;</span><br><span class="line">      vue:<span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>:<span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      axios:<span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">      vuex:<span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;element-ui&#x27;</span>:<span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;iview&#x27;</span>:<span class="string">&#x27;iview&#x27;</span>,</span><br><span class="line">      echarts:<span class="string">&#x27;echarts&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：通过外部引入cdn文件会遇到样式优先级的问题，如果有自己定义的外部样式文件，需要调高自己样式文件的优先级，否则自己写的样式可能会被覆盖掉。</p><p>再次打包发现自己的项目从23.3M变成了9.3M</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cdn打包优化&quot;&gt;&lt;a href=&quot;#cdn打包优化&quot; class=&quot;headerlink&quot; title=&quot;cdn打包优化&quot;&gt;&lt;/a&gt;cdn打包优化&lt;/h2&gt;&lt;p&gt;首先需要在index.html文件中通过&lt;a href=&quot;https://www.bootcdn.c</summary>
      
    
    
    
    <category term="打包" scheme="http://example.com/categories/%E6%89%93%E5%8C%85/"/>
    
    
  </entry>
  
  <entry>
    <title>keep-alive</title>
    <link href="http://example.com/2021/07/20/keep-alive/"/>
    <id>http://example.com/2021/07/20/keep-alive/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:19:38.330Z</updated>
    
    <content type="html"><![CDATA[<p>需求：系统列表页设置好的筛选条件，离开本页面，下次再点进来，不会被清空。</p><p>解决的方法：使用keep-alive</p><p>使用方法： </p><p>1.需要保存数据的组件需要用keep-alive作为外层标签，可以放在app.vue中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;!-- 需要缓存的视图组件 --&gt;</span><br><span class="line">    &lt;router-view v-if&#x3D;&quot;$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br><span class="line">&lt;!-- 不需要缓存的视图组件 --&gt;</span><br><span class="line">&lt;router-view v-if&#x3D;&quot;!$route.meta.keepAlive&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><p>2.在路由文件中添加要进行缓存的标识，keepAlive为true时进行缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;materialManage&#x2F;materialOutput&quot;, &#x2F;&#x2F; 原材料出仓</span><br><span class="line">    name: &quot;materialOutput&quot;,</span><br><span class="line">    component: (resolve) &#x3D;&gt; require([&quot;..&#x2F;views&#x2F;pages&#x2F;materialOutput&quot;], resolve),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &quot;原材料出仓&quot;,</span><br><span class="line">      keepAlive: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="原理和理解"><a href="#原理和理解" class="headerlink" title="原理和理解"></a>原理和理解</h3><p>1.keep-alive不会生成真正的DOM节点。Vue在初始化生命周期的时候，为组件实例建立父子关系会根据abstract属性决定是否忽略某个组件。在keep-alive中，设置了abstract:true，那Vue就会跳过该组件实例</p><p>2.keep-alive的生命周期</p><ul><li>初次进入时：created &gt; mounted &gt; activated；退出后触发 deactivated</li><li>再次进入：会触发 activated；事件挂载的方法等，只执行一次的放在 mounted 中；组件每次进去执行的方法放在 activated 中</li></ul><p>注：activated只在被 keep-alive 缓存的组件激活时调；deactivated被 keep-alive 缓存的组件停用时调用。</p><p>3.属性：</p><ul><li><p><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存。</p></li><li><p><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</p></li><li><p><code>max</code> - 数字。最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p></li></ul><p>实例：结合澳亚项目，顶部菜单存储在vuex，如果在顶部菜单栏被关掉，之前的信息不进行存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> routerName = <span class="built_in">this</span>.$store.state.tagsView.visitedViews.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.name === <span class="keyword">from</span>.name;</span><br><span class="line">      &#125;);</span><br><span class="line"> <span class="keyword">if</span> (<span class="string">&quot;keepAlive&quot;</span> <span class="keyword">in</span> to.meta) &#123;</span><br><span class="line">         to.meta.keepAlive=<span class="literal">true</span>;  <span class="comment">//解决第一次进入缓存无效的问题</span></span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;keepAlive&quot;</span> <span class="keyword">in</span> <span class="keyword">from</span>.meta) &#123;</span><br><span class="line">        <span class="keyword">if</span> (routerName === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">from</span>.meta.keepAlive = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">from</span>.meta.keepAlive = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>总结： 一般情况下，我们都可以通过设置keepAlive为false清除缓存，但对于查看详情，类似于首检查看详情时，详情页会保存记录，下次再查看另一个的详情，不需要上一次的缓存，解决的办法如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在首检详情页面添加如下代码</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="built_in">this</span>.indexOf(val);</span><br><span class="line">      <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.splice(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;; <span class="comment">//在数组原型上添加移除指定元素（非指定方法）</span></span><br><span class="line">    <span class="comment">//his.$vnode.parent.componentInstance.cache是keep-alive存放的缓存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">this</span>.$vnode.parent.componentInstance.cache) &#123;</span><br><span class="line">      <span class="comment">//删除firstInspectionDetail页面中的缓存，在该页面被完全关闭时，也就是不存在顶部导航栏里</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="built_in">this</span>.$vnode.parent.componentInstance.cache[key].elm.className ==</span><br><span class="line">          <span class="string">&quot;firstInspectionDetail&quot;</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">this</span>.$store.state.tagsView.visitedViews.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> item.name == <span class="string">&quot;firstInspectionDetail&quot;</span>;</span><br><span class="line">        &#125;) == <span class="literal">undefined</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.$vnode.parent.componentInstance.cache[key];</span><br><span class="line">        <span class="built_in">this</span>.$vnode.parent.componentInstance.keys.remove(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需求：系统列表页设置好的筛选条件，离开本页面，下次再点进来，不会被清空。&lt;/p&gt;
&lt;p&gt;解决的方法：使用keep-alive&lt;/p&gt;
&lt;p&gt;使用方法： &lt;/p&gt;
&lt;p&gt;1.需要保存数据的组件需要用keep-alive作为外层标签，可以放在app.vue中&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>企业码——JSSDK</title>
    <link href="http://example.com/2021/07/20/%E4%BC%81%E4%B8%9A%E7%A0%81_JSSDK/"/>
    <id>http://example.com/2021/07/20/%E4%BC%81%E4%B8%9A%E7%A0%81_JSSDK/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:21:48.144Z</updated>
    
    <content type="html"><![CDATA[<p>JSSDK，是在企业码项目中使用，为了统计页面的一个访问量所进行的一个操作，不会跨域名去访问时，具体的实现方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;vue在每次离开当前页面进行的一个方法调用</span><br><span class="line">beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">    if (to.name &#x3D;&#x3D;&#x3D; &quot;worktrace&quot;) &#123;</span><br><span class="line">      JSSDK_QYM.sendData(&#123;</span><br><span class="line">        pageUrl: &quot;http:&#x2F;&#x2F;qym.dtsum.com&#x2F;worktrace&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else if (to.name &#x3D;&#x3D;&#x3D; &quot;carddetail&quot;) &#123;</span><br><span class="line">      JSSDK_QYM.sendData(&#123;</span><br><span class="line">        pageUrl: &quot;http:&#x2F;&#x2F;qym.dtsum.com&#x2F;carddetail&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>离开页面会发送<a href="https://qym.zj.gov.cn/servicePath/accessLog/qymLog%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E4%BB%A3%E8%A1%A8%E8%AE%BE%E7%BD%AE%E6%88%90%E5%8A%9F%E3%80%82">https://qym.zj.gov.cn/servicePath/accessLog/qymLog这个请求代表设置成功。</a></p><p>总结5个入口文件的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JSSDK，是在企业码项目中使用，为了统计页面的一个访问量所进行的一个操作，不会跨域名去访问时，具体的实现方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>将html元素转换为图片并可以下载</title>
    <link href="http://example.com/2021/07/20/%E5%B0%86html%E5%85%83%E7%B4%A0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87%E5%B9%B6%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%85%B7%E4%BD%93%E7%A4%BA%E4%BE%8B%E5%A6%82%E4%B8%8B/"/>
    <id>http://example.com/2021/07/20/%E5%B0%86html%E5%85%83%E7%B4%A0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87%E5%B9%B6%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%85%B7%E4%BD%93%E7%A4%BA%E4%BE%8B%E5%A6%82%E4%B8%8B/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:21:23.761Z</updated>
    
    <content type="html"><![CDATA[<p>将html元素转换为图片并可以下载，具体示例如下: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;previewPrint&quot; id&#x3D;&quot;previewPrint&quot; ref&#x3D;&quot;imageWrapper&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;item in barcodeList&quot; :key&#x3D;&quot;item.index&quot; class&#x3D;&quot;printBar&quot;&gt;</span><br><span class="line">          &lt;div&gt;料箱编码：AB0300001&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;printDescribe&quot;&gt;</span><br><span class="line">            &lt;div&gt;型号：AB-001&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;重量(kg)：10.15&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;barcode :value&#x3D;&quot;item.value&quot; height&#x3D;&quot;70&quot;&gt;</span><br><span class="line">            &#123;&#123; item.value &#125;&#125;</span><br><span class="line">          &lt;&#x2F;barcode&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;转换工具</span><br><span class="line">import html2canvas from &#39;html2canvas&#39;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//点击下载调用的函数</span></span><br><span class="line"><span class="function"><span class="title">download</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      html2canvas(<span class="built_in">this</span>.$refs.imageWrapper, &#123;</span><br><span class="line">        backgroundColor: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">        scal: <span class="number">2</span></span><br><span class="line">      &#125;).then(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="comment">// 关闭抗锯齿</span></span><br><span class="line">        context.mozImageSmoothingEnabled = <span class="literal">false</span>;</span><br><span class="line">        context.webkitImageSmoothingEnabled = <span class="literal">false</span>;</span><br><span class="line">        context.msImageSmoothingEnabled = <span class="literal">false</span>;</span><br><span class="line">        context.imageSmoothingEnabled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dataURL = canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.createImgUrl = dataURL;</span><br><span class="line">        <span class="built_in">this</span>.fileDownload(dataURL);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">     fileDownload (downloadUrl) &#123;</span><br><span class="line">      <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">      aLink.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">      aLink.href = downloadUrl;</span><br><span class="line">      aLink.download = <span class="string">&#x27;料箱条形码.png&#x27;</span>;</span><br><span class="line">      <span class="comment">// 触发点击-然后移除</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(aLink);</span><br><span class="line">      aLink.click();</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(aLink);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将html元素转换为图片并可以下载，具体示例如下: &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序开发以及遇到的问题</title>
    <link href="http://example.com/2021/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2021/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:22:31.945Z</updated>
    
    <content type="html"><![CDATA[<p>小程序开发</p><h3 id="一、申请小程序账号"><a href="#一、申请小程序账号" class="headerlink" title="一、申请小程序账号"></a>一、申请小程序账号</h3><p>一个邮箱只能申请一个小程序账号，对应一个小程序项目，个人最多可以申请5个，企业最多可以申请50个</p><h3 id="二、项目开发"><a href="#二、项目开发" class="headerlink" title="二、项目开发"></a>二、项目开发</h3><p>1.新建小程序项目，appid填写新申请的小程序账号中的，不使用云开发</p><p>2.默认新建的项目下没有package.json文件，所以需要使用npm init初始化一直回车，会在根目录下创建</p><p>3.使用npm命令进行安装第三方插件（配置要看相应的官方文档）</p><p>4.点击详情=&gt;本地设置=&gt;使用npm包，点击顶部菜单栏 工具=&gt;构建npm，然后引入组件就可以使用了</p><p><strong>注意</strong>： 这个模块是必须的，每次安装npm模块都需要构建npm</p><h3 id="单位：-（iphone）"><a href="#单位：-（iphone）" class="headerlink" title="单位： （iphone）"></a>单位： （iphone）</h3><p>1.物理像素(屏幕分辨率）：  像素点 px    750* 1334</p><p>2.设备独立像素（css像素）：  虚拟像素                     375* 667</p><p>3.dpr：  设备像素比=物理像素/设备独立像素  iPhone6的dpr是2</p><p>4.ppI：  一英寸显示屏上的像素点个数      5.5英寸的设备是对角线的长度   163</p><p>小程序适配： </p><p>常用rem（根元素字体大小）、viewport（布局视图等于视觉视图，本身布局视图（750）&gt;视觉视图（375））</p><p>iphone6：  1rpx=1物理像素=0.5px   1rpx=目标设备宽度/750*px   底层已经做了viewport适配的处理</p><p>视网膜屏幕：  iphone6的dpr是2是人类肉眼分辨的极限</p><h3 id="项目开发中遇到的问题"><a href="#项目开发中遇到的问题" class="headerlink" title="项目开发中遇到的问题"></a>项目开发中遇到的问题</h3><p>1.图表问题</p><p>（1）小程序利用ec-canvas组件使用echarts图表示，真机调试会报错，此时为ec-canvas标签添加force-use-old-canvas=”true”，使用后画面可能会失真，上线去掉即可（正式上线不会有这个问题）</p><p>（2）图表可能存在加载不出来或者不随页面滚动的问题，使用force-use-old-canvas=”true”图表会跟着页面移动，但是页面会失真，使用旧的canvas</p><p>2.小程序van  dialog使用报错   未找到 van-dialog 节点，请确认 selector 及 context 是否正确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dialog.alert(&#123;</span><br><span class="line">    context: <span class="built_in">this</span>,<span class="comment">//不添加这个会报如上错误</span></span><br><span class="line">    message: <span class="string">&#x27;弹窗内容&#x27;</span>,</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// on close</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.获取上一个通过navigator跳转的页面路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pages = getCurrentPages();</span><br><span class="line"><span class="keyword">let</span> currPage = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (pages.length) &#123;</span><br><span class="line">  currPage = pages[pages.length - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> route = currPage.route</span><br></pre></td></tr></table></figure><p>4.页面中传过来的参数都在onload周期函数中的options</p><p>5.全局配置中tabBar中的页面，不能把通过navigateTo/redirectTo跳转，要使用switchTab跳转</p><p>6.在vant标签中使用iconfont，例如在输入框左侧添加图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-field</span> <span class="attr">password</span> <span class="attr">class</span>=<span class="string">&quot;input_detail&quot;</span> <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;password&#125;&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">placeholder-style</span>=<span class="string">&quot;fontSize: 28rpx;fontFamily: PingFang SC;fontWeight: 500;&quot;</span>&gt;</span></span><br><span class="line">    //特殊处理</span><br><span class="line">    <span class="tag">&lt;<span class="name">van-icon</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">class-prefix</span>=<span class="string">&#x27;iconicon&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;mima&#x27;</span> <span class="attr">slot</span>=<span class="string">&quot;left-icon&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-field</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.小程序表单必填项判断，如果自己写会较复杂，所以可以使用别人封装好的WxValidate.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WxValidate <span class="keyword">from</span> <span class="string">&quot;../../../../utils/WxValidate&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 校验必填项</span></span><br><span class="line"><span class="function"><span class="title">initValidate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rules = &#123;</span><br><span class="line">    ztdypMachineSpeed: &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      number: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    fileList: &#123;</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> message = &#123;</span><br><span class="line">    ztdypMachineSpeed: &#123;</span><br><span class="line">      required: <span class="string">&#x27;请输入车速&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    fileList: &#123;</span><br><span class="line">      required: <span class="string">&#x27;请上传图片&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例化当前的验证规则和提示消息</span></span><br><span class="line">  <span class="built_in">this</span>.WxValidate = <span class="keyword">new</span> WxValidate(rules, message);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//在onload函数中调用initValidate函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">onload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.initValidate()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//在提交接口的函数中进行校验</span></span><br><span class="line"><span class="comment">//validateParams是要校验的字段，对象json格式</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.WxValidate.checkForm(validateParams)) &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="built_in">this</span>.WxValidate.errorList[<span class="number">0</span>]</span><br><span class="line">      Toast(error.msg);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8.小程序使用formData格式上传文件，由于小程序本身没有formData对象，所以需要引入封装好的formData.js，还要引用mimeMap.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">&quot;contractNo&quot;</span>, <span class="built_in">this</span>.properties.options.contractNo);<span class="comment">//键值对json</span></span><br><span class="line">formData.appendFile(<span class="string">&quot;yudingImg&quot;</span> + (i + <span class="number">1</span>), <span class="built_in">this</span>.data.fileList[i].url.replace(getApp().baseUrl, <span class="string">&#x27;&#x27;</span>)); <span class="comment">//文件</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">    url: getApp().baseUrl + <span class="string">&#x27;/dtsum/zongtong/dyeing/DyeingController/yuDingSubmit&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    header: &#123;</span><br><span class="line">      Cookie: wx.getStorageSync(<span class="string">&#x27;sessionid&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: data.contentType  <span class="comment">//传递类型</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: data.buffer, <span class="comment">//固定格式</span></span><br><span class="line">    success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fail</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果是Web端使用axios发送请求时，可以使用transformRequest发送formData格式，该方法只适用于post、put和patch这几种请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    roleName: this.formCustom.roleName,</span><br><span class="line">    cardType: this.formCustom.cardType, // 2019.12.19修改 保存角色时添加是否具有平板刷卡权限</span><br><span class="line">    roleDescribe: this.formCustom.des,</span><br><span class="line">    authorityList: this.authorityLists + &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  transformRequest: [</span><br><span class="line">      data = Qs.stringify(data, &#123; arrayFormat: &quot;repeat&quot; &#125;);</span><br><span class="line">      return data;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>9.小程序上传图片会生成一个虚拟地址，如果要用formData解析（readFileSync只能读取本地路径），提交接口必须传递这个本地的虚拟地址，如果有保存草稿功能，下次进来可以看到上次上传的图片，并可以直接提交，需要后端也返回这个虚拟的本地地址</p><p>10.小程序中获取dom节点的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.selectComponent(<span class="string">&quot;#list&quot;</span>)</span><br></pre></td></tr></table></figure><p>11.vant中toast组件中不能设置节点，要在组件所在的页面中写<van-toast id="van-toast" /><br>12.双向绑定的局限性： model: value只限于普通键值对，若是对象里的键值对则无效</p><p>13.使用apply改变指向null，如…展开运算符</p><p>14.小程序原生组件textarea和vant中弹出层Popup一起使用，textarea会漂浮在Popup上，可能是因为原生组件的原因，或者是本身的bug，解决办法是在Popup弹出的时候暂时性将textarea隐藏</p><p>15.上传文件：  本地调试时上传的文件应该是放到微信的云服务器上，所以会生成一个虚拟地址<a href="http://temp/+%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%8C%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%B8%8A%E4%BC%A0%E9%83%BD%E7%94%A8%E8%BF%99%E4%B8%AA%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E6%B2%A1%E9%97%AE%E9%A2%98%E3%80%82">http://temp/+文件名，读取与上传都用这个虚拟地址没问题。</a></p><p>但如果是正式环境，接口使用https，在手机上上传图片的地址则不能使用<a href="http://temp/+%E6%96%87%E4%BB%B6%E5%90%8D">http://temp/+文件名</a> 这个虚拟地址，上传图片的地址应该是wxfile://后加url，读取读片就用上传到服务器的地址（web端的话应该是可以使用虚拟的那个）</p><p>16.使用第三方组件库的组件最好都放在代码最下方，否则会出现不必要的bug（有的机型），例如：  van-Popup弹出层中的按钮，在苹果手机上就会和页面中的按钮重叠，导致层级错乱</p><p>17.微信小程序中背景图不能使用本地图片，解决办法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用网络图片</span><br><span class="line">2.Base64编码</span><br><span class="line">3.使用image标签，设置z-index</span><br></pre></td></tr></table></figure><p>18.监听用户滑动页面事件</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object</a></p><p>在所需要的页面定义onPageScroll方法，用于页面滑动到某一位置进行不同的样式展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听某元素滚动的位置</span></span><br><span class="line">  <span class="function"><span class="title">onPageScroll</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> query = wx.createSelectorQuery()</span><br><span class="line">    query.select(<span class="string">&#x27;#dyeingFinshingList&#x27;</span>).boundingClientRect(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> top = rect.top</span><br><span class="line">      <span class="keyword">if</span> (top &lt;= <span class="number">115</span>) &#123;  <span class="comment">//临界值，根据自己的需求来调整</span></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          transparent: <span class="literal">false</span>,</span><br><span class="line">          filterFixed: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">          transparent: <span class="literal">true</span>,</span><br><span class="line">          filterFixed: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).exec()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>19.父子组件传值</p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dyeingFinshingList</span> <span class="attr">dyeingStatus</span>=<span class="string">&quot;&#123;&#123;dyeingStatus&#125;&#125;&quot;</span> <span class="attr">orderDeliveryDate</span>=<span class="string">&quot;&#123;&#123;orderDeliveryDate&#125;&#125;&quot;</span> <span class="attr">searchType</span>=<span class="string">&quot;&#123;&#123;searchType&#125;&#125;&quot;</span> <span class="attr">searchText</span>=<span class="string">&quot;&#123;&#123;searchText&#125;&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dyeingFinshingList&quot;</span> <span class="attr">bind:roll</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dyeingFinshingList</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scroll(e)&#123;</span><br><span class="line">  if(e.detail.detail.scrollTop&gt;100)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      transparent: false,</span><br><span class="line">      filterFixed: true,</span><br><span class="line">      searchBtnShow:false</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      transparent: true,</span><br><span class="line">      filterFixed: false,</span><br><span class="line">      searchBtnShow:true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件改变子组件中的值</span></span><br><span class="line"><span class="built_in">this</span>.selectComponent(<span class="string">&#x27;#dyeingFinshingList&#x27;</span>).properties.dyeingStatus=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">this</span>.selectComponent(<span class="string">&#x27;#dyeingFinshingList&#x27;</span>).show(); <span class="comment">//调用子组件的show方法</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123; <span class="comment">//接收父组件传递的参数</span></span><br><span class="line">    dyeingStatus: &#123;</span><br><span class="line">      type: <span class="string">&quot;Object&quot;</span>,</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">      observer: <span class="string">&#x27;getTableDataList&#x27;</span>  <span class="comment">//该值发生变化时会调用该getTableDataList方法</span></span><br><span class="line">    &#125;,</span><br><span class="line">    orderDeliveryDate: &#123;</span><br><span class="line">      type: <span class="string">&quot;Object&quot;</span>,</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">      observer: <span class="string">&#x27;getTableDataList&#x27;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    searchType: &#123;</span><br><span class="line">      type: <span class="string">&quot;Object&quot;</span>,</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">      observer: <span class="string">&#x27;getTableDataList&#x27;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    searchText: &#123;</span><br><span class="line">      type: <span class="string">&quot;Object&quot;</span>,</span><br><span class="line">      value: <span class="literal">null</span>,</span><br><span class="line">      observer: <span class="string">&#x27;getTableDataList&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//子组件触发该事件时，同时调用父组件绑定的roll方法</span></span><br><span class="line">    <span class="function"><span class="title">scroll</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;roll&#x27;</span>,e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20.搜索的历史纪录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击染厂添加历史记录</span></span><br><span class="line"> <span class="function"><span class="title">clickFactory</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> searchRecord = <span class="built_in">this</span>.data.searchRecord;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; searchRecord.length; i++) &#123;</span><br><span class="line">     <span class="comment">//已有记录则不添加</span></span><br><span class="line">     <span class="keyword">if</span> (e.currentTarget.dataset.message == searchRecord[i]) &#123;</span><br><span class="line">       wx.navigateTo(&#123;</span><br><span class="line">         url: <span class="string">&#x27;/pages/dyeingFinishing/dyeingFinishingSearch/dyeingFinishingSearch?dyeingStatus=10&#x27;</span> + <span class="string">&#x27;&amp;orderDeliveryDate=1&#x27;</span> + <span class="string">&#x27;&amp;searchType=2&#x27;</span>+<span class="string">&#x27;&amp;factory=&#x27;</span>+e.currentTarget.dataset.message</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (searchRecord.length &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">     searchRecord.pop() <span class="comment">// 删除最早的一条记录</span></span><br><span class="line">     searchRecord.unshift(e.currentTarget.dataset.message)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     searchRecord.unshift(e.currentTarget.dataset.message)</span><br><span class="line">   &#125;</span><br><span class="line">   wx.setStorageSync(<span class="string">&#x27;searchRecord&#x27;</span>, searchRecord)</span><br><span class="line">   wx.navigateTo(&#123;</span><br><span class="line">     url: <span class="string">&#x27;/pages/dyeingFinishing/dyeingFinishingSearch/dyeingFinishingSearch?dyeingStatus=10&#x27;</span> + <span class="string">&#x27;&amp;orderDeliveryDate=1&#x27;</span> + <span class="string">&#x27;&amp;searchType=2&#x27;</span>+<span class="string">&#x27;&amp;factory=&#x27;</span>+e.currentTarget.dataset.message</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>21.小程序对象中的值无法进行双向绑定，需要通过bindinput进行实时改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder-class</span>=<span class="string">&quot;input_placeholder&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;bindInput&quot;</span> <span class="attr">model:value</span>=<span class="string">&quot;&#123;&#123;item.rejectsWeight&#125;&#125;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入废品重量&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bindInput</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="built_in">this</span>.data.personList;</span><br><span class="line">    arr[event.target.dataset.index].orderList[event.target.dataset.childindex].rejectsWeight = event.detail.value</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      personList: arr</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>22.双层for循环</p><p>小程序双层for循环想要分别拿到内外层的item和index时，要起不同的别名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weighing_container_list_Data&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;testList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;deviceNumber&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;weighing_container_list_item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;item.orderList&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;items&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;childIndex&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;workNo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>23.返回上一页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack(&#123;</span><br><span class="line">    delta: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>24.自定义组件修改子组件样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;nav-wrap&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;nav-title&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">//对应js文件</span><br><span class="line">Component(&#123;</span><br><span class="line">  externalClasses: [&#x27;nav-wrap&#x27;,&#x27;nav-title&#x27;],  //需要改变样式的类名</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">nav-bar</span> <span class="attr">nav-wrap</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">nav-title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">//设置新的样式</span><br><span class="line">.navbar&#123;&#125;</span><br><span class="line">.title&#123;&#125;</span><br></pre></td></tr></table></figure><p>遇到的问题： 只要子组件使用externalClasses外部样式类字段，子组件样式完全失效，还未找到解决办法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小程序开发&lt;/p&gt;
&lt;h3 id=&quot;一、申请小程序账号&quot;&gt;&lt;a href=&quot;#一、申请小程序账号&quot; class=&quot;headerlink&quot; title=&quot;一、申请小程序账号&quot;&gt;&lt;/a&gt;一、申请小程序账号&lt;/h3&gt;&lt;p&gt;一个邮箱只能申请一个小程序账号，对应一个小程序项目，个人最</summary>
      
    
    
    
    <category term="小程序" scheme="http://example.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>element-ui文件上传</title>
    <link href="http://example.com/2021/07/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2021/07/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:22:06.406Z</updated>
    
    <content type="html"><![CDATA[<p>使用element-ui组件中的upload组件实现多个文件的上传，文件上传基本实现了以下几个功能： </p><p>1.文件上传是必填项，上传成功后下边的提示要消失</p><p>2.限制文件上传类型、数量以及大小</p><p>3.文件在上传过程中不允许提交</p><p>4.文件上传成功后，自己可以点击下载下来</p><p>5.特殊情况下自己上传的文件不允许删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-form</span><br><span class="line">     :model&#x3D;&quot;ruleForm&quot;</span><br><span class="line">     :rules&#x3D;&quot;rules&quot;</span><br><span class="line">     ref&#x3D;&quot;ruleForm&quot;</span><br><span class="line">     label-width&#x3D;&quot;150px&quot;</span><br><span class="line">     class&#x3D;&quot;demo-ruleForm&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;el-form-item</span><br><span class="line">            label&#x3D;&quot;申请表扫描件（加盖企业公章）&quot;</span><br><span class="line">            class&#x3D;&quot;checkTable&quot;</span><br><span class="line">            prop&#x3D;&quot;acceptFileList&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-upload</span><br><span class="line">              class&#x3D;&quot;upload-demo&quot;</span><br><span class="line">              :disabled&#x3D;&quot;isShowDelete&quot;  &#x2F;&#x2F;是否可以删除文件</span><br><span class="line">              :action&#x3D;&quot;uploadFile&quot;</span><br><span class="line">              :limit&#x3D;&quot;1&quot;  &#x2F;&#x2F;限制上传文件的个数</span><br><span class="line">              accept&#x3D;&quot;.pdf,.zip,.rar&quot;  &#x2F;&#x2F;限制上传文件的格式</span><br><span class="line">              :on-exceed&#x3D;&quot;handleExceed&quot;  &#x2F;&#x2F;文件超出个数限制的回调</span><br><span class="line">              :on-success&#x3D;&quot;uploadSuccessAccept&quot; &#x2F;&#x2F;文件上传成功的回调</span><br><span class="line">              :on-progress&#x3D;&quot;handleUpProgress&quot;  &#x2F;&#x2F;文件上传中的回调</span><br><span class="line">              :before-upload&#x3D;&quot;beforeUpload&quot;  &#x2F;&#x2F;文件上传前的回调</span><br><span class="line">              :on-error&#x3D;&quot;uploadErrorAccept&quot;  &#x2F;&#x2F;文件上传错误的回调</span><br><span class="line">              :file-list&#x3D;&quot;ruleForm.acceptFileList&quot; &#x2F;&#x2F;已上传文件的列表</span><br><span class="line">              :on-remove&#x3D;&quot;removeAccept&quot;  &#x2F;&#x2F;文件移出的回调</span><br><span class="line">              :on-preview&#x3D;&quot;downloadFile&quot; &#x2F;&#x2F;已上传的文件下载的回调</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;el-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;&gt;点击上传&lt;&#x2F;el-button&gt;</span><br><span class="line">              &lt;div slot&#x3D;&quot;tip&quot; class&#x3D;&quot;el-upload__tip&quot;&gt;</span><br><span class="line">                只能上传pdf&#x2F;zip&#x2F;rar文件</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;el-upload&gt;</span><br><span class="line">          &lt;&#x2F;el-form-item&gt;</span><br><span class="line">          &lt;el-form-item&gt;</span><br><span class="line">            &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm(&#39;ruleForm&#39;)&quot;</span><br><span class="line">              &gt;提交&lt;&#x2F;el-button</span><br><span class="line">            &gt;</span><br><span class="line">          &lt;&#x2F;el-form-item&gt;</span><br><span class="line">&lt;&#x2F;el-form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        isShowDelete:true,</span><br><span class="line">        isFileUploadSuccess:true,  &#x2F;&#x2F;文件是否上传成功</span><br><span class="line">        uploadFile: &#39;&#x2F;yongkang&#x2F;dtsum&#x2F;file&#x2F;fileController&#x2F;reUploadFile&#39;, &#x2F;&#x2F;上传文件的接口地址</span><br><span class="line">        fileList1:[],</span><br><span class="line">        acceptFileId:0,</span><br><span class="line">        ruleForm:&#123;</span><br><span class="line">            acceptFileList:[]</span><br><span class="line">        &#125;,</span><br><span class="line">        rules:&#123;</span><br><span class="line">            acceptFileList: [</span><br><span class="line">              &#123;</span><br><span class="line">                message: &#39;请上传申请表扫描件&#39;,</span><br><span class="line">                trigger: &#39;change&#39;,</span><br><span class="line">                required: true</span><br><span class="line">              &#125;</span><br><span class="line">        ],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  methods:&#123;</span><br><span class="line">     &#x2F;&#x2F; 文件上传之前判断类型</span><br><span class="line">    beforeUpload(file) &#123;</span><br><span class="line">      var type &#x3D; file.name.substring(file.name.lastIndexOf(&#39;.&#39;) + 1)</span><br><span class="line">      if (type !&#x3D;&#x3D; &#39;pdf&#39; &amp;&amp; type !&#x3D;&#x3D; &#39;zip&#39; &amp;&amp; type !&#x3D;&#x3D; &#39;rar&#39;) &#123;</span><br><span class="line">        this.$message.warning(&#39;请上传pdf&#x2F;zip&#x2F;rar格式的文件&#39;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      const isLt2M &#x3D; file.size &#x2F; 1024 &#x2F; 1024 &lt; 20</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.warning(&#39;上传文件大小不能超过 20MB&#39;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 文件上传个数限制</span><br><span class="line">    handleExceed() &#123;</span><br><span class="line">      this.$message.warning(&#39;最多上传1个文件&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;文件上传中的函数</span><br><span class="line">    handleUpProgress()&#123;</span><br><span class="line">        this.isFileUploadSuccess&#x3D;false;  &#x2F;&#x2F;代表在上传中，整个表单不能提交</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F; 文件上传成功调用的函数</span><br><span class="line">    uploadSuccessAccept(response, file, fileList1) &#123;</span><br><span class="line">      this.isFileUploadSuccess&#x3D;true;</span><br><span class="line">      this.ruleForm.acceptFileList.push(file)</span><br><span class="line">      &#x2F;&#x2F;上传成功后取消提示</span><br><span class="line">      this.$refs.ruleForm.validateField(&#39;acceptFileList&#39;)</span><br><span class="line">      this.acceptFileId &#x3D; response</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;文件上传失败的函数</span><br><span class="line">    uploadErrorAccept()&#123;</span><br><span class="line">      this.isFileUploadSuccess &#x3D; true</span><br><span class="line">      this.acceptFileId &#x3D; 0</span><br><span class="line">      this.$message.warning(&#39;上传失败&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F; 移除文件触发的函数</span><br><span class="line">    removeFile1(file, fileList) &#123;</span><br><span class="line">      this.ruleForm.acceptFileList.pop(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;文件下载</span><br><span class="line">    downloadFile(file) &#123;</span><br><span class="line">      window.location.href &#x3D; file.url</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;获取整个项目信息是</span><br><span class="line">    getProjectMessage()&#123;</span><br><span class="line">        this.acceptFileId &#x3D; res.data.body.projectInfo.ykipApplication</span><br><span class="line">        this.ruleForm.acceptFileList.push(&#123;</span><br><span class="line">              id: this.acceptFileId,</span><br><span class="line">              name: &#39;申请表扫描件&#39;,</span><br><span class="line">              url:</span><br><span class="line">                &#39;&#x2F;yongkang&#x2F;dtsum&#x2F;file&#x2F;fileController&#x2F;reDownloadFile?fileId&#x3D;&#39; +</span><br><span class="line">                this.acceptFileId</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate(valid &#x3D;&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          this.submitProject(flag)  &#x2F;&#x2F;提交的接口</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$message.error(&#39;请先填写必填项&#39;)</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用element-ui组件中的upload组件实现多个文件的上传，文件上传基本实现了以下几个功能： &lt;/p&gt;
&lt;p&gt;1.文件上传是必填项，上传成功后下边的提示要消失&lt;/p&gt;
&lt;p&gt;2.限制文件上传类型、数量以及大小&lt;/p&gt;
&lt;p&gt;3.文件在上传过程中不允许提交&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="element-ui" scheme="http://example.com/categories/element-ui/"/>
    
    
  </entry>
  
  <entry>
    <title>页面滚动（页面内点击跳转到相应位置）</title>
    <link href="http://example.com/2021/07/20/%E7%82%B9%E5%87%BB%E9%A1%B5%E9%9D%A2%E5%86%85%E8%B7%B3%E8%BD%AC/"/>
    <id>http://example.com/2021/07/20/%E7%82%B9%E5%87%BB%E9%A1%B5%E9%9D%A2%E5%86%85%E8%B7%B3%E8%BD%AC/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:17:09.741Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;home-left-slider-main&quot; id&#x3D;&quot;home-left-slider-main&quot;&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 0 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(0)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-zhengce&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱政策&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 1 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(1)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-dialogue&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱企问&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 2 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(2)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-jinrong-copy&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱企办&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 3 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(3)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-baoxian&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱保险&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 4 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(4)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-zhenduan&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱诊断&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">     &lt;li :class&#x3D;&quot;index &#x3D;&#x3D;&#x3D; 5 ? &#39;isActive&#39; : &#39;&#39;&quot; @click&#x3D;&quot;isActive(5)&quot;&gt;</span><br><span class="line">       &lt;i class&#x3D;&quot;iconfont icon-peixun&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">       &lt;span&gt;岱培训&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">   &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>1.点击某个div跳转到相应的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isActive</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.index = index</span><br><span class="line">  <span class="built_in">this</span>.goDiv(index)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">goDiv</span>(<span class="params">div</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = $(<span class="string">&#x27;#&#x27;</span> + div).offset().top - <span class="number">30</span></span><br><span class="line">  $(<span class="string">&#x27;html,body&#x27;</span>).animate(&#123; <span class="attr">scrollTop</span>: a &#125;, <span class="string">&#x27;slow&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    &#x2F;&#x2F;给window添加一个滚动滚动监听事件</span><br><span class="line">    window.addEventListener(&#39;scroll&#39;, this.handleScroll)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleScroll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">//改变元素#searchBar的top值</span></span><br><span class="line">      <span class="keyword">var</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">      <span class="keyword">var</span> offsetTop = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).offsetTop</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &lt;= <span class="number">200</span>) &#123;</span><br><span class="line">        offsetTop = <span class="number">500</span> - <span class="built_in">Number</span>(scrollTop);</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top =</span><br><span class="line">          offsetTop + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;0px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">900</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;-200px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">1500</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;-350px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (scrollTop &gt; <span class="number">1800</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#home-left-slider-main&#x27;</span>).style.top = <span class="string">&#x27;-550px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">destroyed() &#123;</span><br><span class="line">   &#x2F;&#x2F;离开该页面需要移除这个监听的事件</span><br><span class="line">   window.removeEventListener(&#39;scroll&#39;, this.handleScroll)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义筛选条件</title>
    <link href="http://example.com/2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89/"/>
    <id>http://example.com/2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:23:24.734Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从多选框中挑选作为新的筛选条件</span></span><br><span class="line">shaixuanArray:[]<span class="comment">//筛选条件数组</span></span><br><span class="line">duoxuanArray:[]<span class="comment">//多选框数组</span></span><br><span class="line">isShowDiv:<span class="literal">false</span><span class="comment">//自定义筛选条件整个框是否展示</span></span><br><span class="line">isShowBox:<span class="literal">false</span><span class="comment">//自定义筛选多选框是否显示</span></span><br><span class="line">handleClickFilter()<span class="comment">//点击自定义筛选</span></span><br><span class="line">handleClickConfirm()<span class="comment">//点击确定</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handleClickFilter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.isShowBox=!<span class="built_in">this</span>.isShowBox;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.isShowBox===<span class="literal">true</span>)<span class="comment">//从筛选条件跳转到多选框</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">this</span>.isShowDiv=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>.duoxuanArray=<span class="built_in">this</span>.shaixuanArray;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;<span class="comment">//从多选框跳到筛选条件</span></span><br><span class="line">  <span class="built_in">this</span>.shaixuanArray.length===<span class="number">0</span>?<span class="built_in">this</span>.isShowDiv=<span class="literal">false</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handleClickConfirm</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.isShowBox=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">this</span>.shaixuanArray=<span class="built_in">this</span>.duoxuanArray;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.shaixuanArray.length===<span class="number">0</span>)&#123;<span class="built_in">this</span>.isShowDiv=<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>表格组件化</title>
    <link href="http://example.com/2021/07/20/%E8%A1%A8%E6%A0%BC%E8%AE%BE%E7%BD%AE%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>http://example.com/2021/07/20/%E8%A1%A8%E6%A0%BC%E8%AE%BE%E7%BD%AE%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:20:39.188Z</updated>
    
    <content type="html"><![CDATA[<p>表格设置组件化的具体实现，利用element-ui的穿梭框组件，修改为适用于项目可以调整顺序的组件</p><h2 id="一、非完美写法"><a href="#一、非完美写法" class="headerlink" title="一、非完美写法"></a>一、非完美写法</h2><p>表格设置组件的使用，主要是在父组件需要按照一下规矩定义：</p><h3 id="父组件："><a href="#父组件：" class="headerlink" title="父组件："></a>父组件：</h3><p>1.引入表格设置的子组件并注册：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import TableSetting from &quot;..&#x2F;..&#x2F;components&#x2F;home&#x2F;tableSetting.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">    TableSetting</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在页面中使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 穿梭框的弹出框 --&gt;</span><br><span class="line">&lt;TableSetting</span><br><span class="line">      :routerPath&#x3D;&quot;routerPath&quot;</span><br><span class="line">      :theadDateReal&#x3D;&quot;bindTheadDateReal&quot;</span><br><span class="line">      @getTableDataList&#x3D;&quot;bindTableDataList&quot;</span><br><span class="line">      :chuansuoDialogVisible.sync&#x3D;&quot;chuansuoDialogVisible&quot;</span><br><span class="line">&gt;&lt;&#x2F;TableSetting&gt;</span><br></pre></td></tr></table></figure><p>3.声明要进行表格设置的变量routerPath和iview表格中的表格数据theadDateReal，子组件中会用到（当页面存在两个表格设置时如下，一个时只留前两个）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      routerPath: &quot;&quot;, &#x2F;&#x2F;需要进行表格设置的表格接口api</span><br><span class="line">      bindTheadDateReal: [], &#x2F;&#x2F;真正表格绑定的表格头</span><br><span class="line">      bindTableDataList: [], &#x2F;&#x2F;表格的数据</span><br><span class="line">      chuansuoDialogVisible: false, &#x2F;&#x2F;弹窗是否显示</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在方法中声明点击 “表格设置” 会触发的函数（当页面存在多个个表格设置时，可以写多个以下函数，就是赋值的内容变掉）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">showTableTitleDialog() &#123;</span><br><span class="line">      this.routerPath &#x3D;</span><br><span class="line">        &quot;&#x2F;dtsum&#x2F;zongtong&#x2F;material&#x2F;materialController&#x2F;materialOutSearch&quot;;</span><br><span class="line">      this.bindTheadDateReal &#x3D; this.tableRealColumns;</span><br><span class="line">      this.bindTableDataList &#x3D; this.getTableDataList;</span><br><span class="line">      this.chuansuoDialogVisible &#x3D; true;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="子组件："><a href="#子组件：" class="headerlink" title="子组件："></a>子组件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使用表格设置有一个约定:</span><br><span class="line">    注意：父组件写的时候不要放在引用组件的里边</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 穿梭框的弹出框 --&gt;</span><br><span class="line">    &lt;Modal</span><br><span class="line">      v-model&#x3D;&quot;chuansuoDialogVisible&quot;</span><br><span class="line">      title&#x3D;&quot;表格设置&quot;</span><br><span class="line">      :width&#x3D;&quot;600&quot;</span><br><span class="line">      :closable&#x3D;&quot;false&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-row&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;20&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;chuanSuo&quot;&gt;</span><br><span class="line">            &lt;el-transfer</span><br><span class="line">              filterable</span><br><span class="line">              filter-placeholder&#x3D;&quot;请输入表头名称&quot;</span><br><span class="line">              :titles&#x3D;&quot;[&#39;未选字段&#39;, &#39;已选字段&#39;]&quot;</span><br><span class="line">              v-model&#x3D;&quot;value&quot;</span><br><span class="line">              :data&#x3D;&quot;data&quot;</span><br><span class="line">              target-order&#x3D;&quot;unshirt&quot;</span><br><span class="line">              @right-check-change&#x3D;&quot;rightCheck&quot;</span><br><span class="line">            &gt;&lt;&#x2F;el-transfer&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;4&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            round</span><br><span class="line">            class&#x3D;&quot;el-icon-arrow-up sort_button&quot;</span><br><span class="line">            :disabled&#x3D;&quot;upDisAbled&quot;</span><br><span class="line">            @click&#x3D;&quot;handleToUp&quot;</span><br><span class="line">            style&#x3D;&quot;margin-top:110px&quot;</span><br><span class="line">          &gt;&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            round</span><br><span class="line">            class&#x3D;&quot;el-icon-arrow-down sort_button&quot;</span><br><span class="line">            :disabled&#x3D;&quot;downDisAbled&quot;</span><br><span class="line">            @click&#x3D;&quot;handleToDown&quot;</span><br><span class="line">            style&#x3D;&quot;margin:10px 0&quot;</span><br><span class="line">          &gt;&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">        &lt;Button @click&#x3D;&quot;cancleSet&quot;&gt;取 消&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setTableTitle&quot;&gt;确 定&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;Modal&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [</span><br><span class="line">    &quot;routerPath&quot;,</span><br><span class="line">    &quot;routerPath1&quot;,</span><br><span class="line">    &quot;chuansuoDialogVisible&quot;,</span><br><span class="line">    &quot;theadDateReal&quot;</span><br><span class="line">  ],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: [],</span><br><span class="line">      value: [],</span><br><span class="line">      upDisAbled: true,</span><br><span class="line">      downDisAbled: true,</span><br><span class="line">      tempSelectionKeys: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    chuansuoDialogVisible: function(val) &#123;</span><br><span class="line">      if (val) &#123;</span><br><span class="line">        this.showTableTitleDialog();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 穿梭框右侧选中改变触发的事件</span><br><span class="line">    rightCheck(selectionKeys, changeKeys) &#123;</span><br><span class="line">      this.tempSelectionKeys &#x3D; selectionKeys;</span><br><span class="line">      if (selectionKeys.length &gt; 0) &#123;</span><br><span class="line">        this.upDisAbled &#x3D; false;</span><br><span class="line">        this.downDisAbled &#x3D; false;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.upDisAbled &#x3D; true;</span><br><span class="line">        this.downDisAbled &#x3D; true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 选项上移</span><br><span class="line">    handleToUp() &#123;</span><br><span class="line">      if (this.tempSelectionKeys.length &gt; 1) &#123;</span><br><span class="line">        this.$Message.warning(&quot;仅支持单选调顺序&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      let indexNum &#x3D; 0;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; this.tempSelectionKeys.length; i++) &#123;</span><br><span class="line">        indexNum &#x3D; this.value.indexOf(this.tempSelectionKeys[i]);</span><br><span class="line">        if (indexNum &gt; 0) &#123;</span><br><span class="line">          this.value.splice(indexNum - 1, 0, this.tempSelectionKeys[i]);</span><br><span class="line">          this.value.splice(indexNum + 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 选项下移</span><br><span class="line">    handleToDown() &#123;</span><br><span class="line">      if (this.tempSelectionKeys.length &gt; 1) &#123;</span><br><span class="line">        this.$Message.warning(&quot;仅支持单选调顺序&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      let indexNum &#x3D; 0;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; this.tempSelectionKeys.length; i++) &#123;</span><br><span class="line">        indexNum &#x3D; this.value.indexOf(this.tempSelectionKeys[i]);</span><br><span class="line">        if (indexNum &gt; -1 &amp;&amp; indexNum !&#x3D;&#x3D; this.value.length - 1) &#123;</span><br><span class="line">          this.value.splice(indexNum + 2, 0, this.tempSelectionKeys[i]);</span><br><span class="line">          this.value.splice(indexNum, 1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 设置表头点击取消</span><br><span class="line">    cancleSet() &#123;</span><br><span class="line">      this.value &#x3D; [];</span><br><span class="line">      this.$emit(&quot;update:chuansuoDialogVisible&quot;, false);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 显示弹出框穿梭框中的字段</span><br><span class="line">    showTableTitleDialog() &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        url: &quot;&#x2F;dtsum&#x2F;zongtong&#x2F;basic&#x2F;CommonController&#x2F;setFormView&quot;,</span><br><span class="line">        method: &quot;get&quot;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          router: this.routerPath</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          if (res.data.success &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; 穿梭框</span><br><span class="line">            const data &#x3D; [];</span><br><span class="line">            const cities &#x3D; res.data.body.allFields;</span><br><span class="line">            cities.forEach((city, index) &#x3D;&gt; &#123;</span><br><span class="line">              data.push(&#123;</span><br><span class="line">                label: city.fieldName,</span><br><span class="line">                key: city.fieldId</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            this.data &#x3D; data;</span><br><span class="line">            for (let i &#x3D; 0; i &lt; res.data.body.needFields.length; i++) &#123;</span><br><span class="line">              this.value.push(res.data.body.needFields[i].fieldId);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 设置表格头显示字段</span><br><span class="line">    setTableTitle() &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        url: &quot;&#x2F;dtsum&#x2F;zongtong&#x2F;basic&#x2F;CommonController&#x2F;editForm&quot;,</span><br><span class="line">        method: &quot;get&quot;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          router: this.routerPath,</span><br><span class="line">          fieldIdList: this.value</span><br><span class="line">        &#125;,</span><br><span class="line">        paramsSerializer: (params) &#x3D;&gt; &#123;</span><br><span class="line">          return this.qs.stringify(params, &#123; indices: false &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            if (res.data.success &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">              this.$Message.success(res.data.msg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$Message.error(res.data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">            this.value.length &#x3D; 0;</span><br><span class="line">            this.$emit(&quot;theadDateReal&quot;, this.theadDateReal.length &#x3D; 0);</span><br><span class="line">            resolve();</span><br><span class="line">          &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">            this.noShow();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    noShow() &#123;</span><br><span class="line">      this.$emit(&quot;update:chuansuoDialogVisible&quot;, false);</span><br><span class="line">      this.$emit(&quot;tableDataList&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、较完美写法"><a href="#二、较完美写法" class="headerlink" title="二、较完美写法"></a>二、较完美写法</h2><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><p>1.引入表格设置的子组件并注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import TableSetting from &quot;..&#x2F;..&#x2F;components&#x2F;home&#x2F;tableSetting.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">    TableSetting</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.api的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tableSetting :chuansuoDialogVisible.sync&#x3D;&quot;chuansuoDialogVisible&quot; :routerPath&#x3D;&quot;routerPath&quot; theadDateReal&#x3D;&quot;theadDateReal&quot; tableDataList&#x3D;&quot;tableDataList&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>chuansuoDialogVisible    为是否显示表格设置弹窗</p><p>routerPath             为表格设置所在表格的接口地址</p><p>theadDateReal            为表格的表格头数组变量</p><p>tableDataList            为获取表格信息的函数名</p><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使用表格设置有一个约定:</span><br><span class="line">    注意：父组件写的时候不要放在引用组件的里边</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 穿梭框的弹出框 --&gt;</span><br><span class="line">    &lt;Modal</span><br><span class="line">      v-model&#x3D;&quot;chuansuoDialogVisible&quot;</span><br><span class="line">      title&#x3D;&quot;表格设置&quot;</span><br><span class="line">      :width&#x3D;&quot;600&quot;</span><br><span class="line">      :closable&#x3D;&quot;false&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-row&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;20&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;chuanSuo&quot;&gt;</span><br><span class="line">            &lt;el-transfer</span><br><span class="line">              filterable</span><br><span class="line">              filter-placeholder&#x3D;&quot;请输入表头名称&quot;</span><br><span class="line">              :titles&#x3D;&quot;[&#39;未选字段&#39;, &#39;已选字段&#39;]&quot;</span><br><span class="line">              v-model&#x3D;&quot;value&quot;</span><br><span class="line">              :data&#x3D;&quot;data&quot;</span><br><span class="line">              target-order&#x3D;&quot;unshirt&quot;</span><br><span class="line">              @right-check-change&#x3D;&quot;rightCheck&quot;</span><br><span class="line">            &gt;&lt;&#x2F;el-transfer&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">        &lt;el-col :span&#x3D;&quot;4&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            round</span><br><span class="line">            class&#x3D;&quot;el-icon-arrow-up sort_button&quot;</span><br><span class="line">            :disabled&#x3D;&quot;upDisAbled&quot;</span><br><span class="line">            @click&#x3D;&quot;handleToUp&quot;</span><br><span class="line">            style&#x3D;&quot;margin-top:110px&quot;</span><br><span class="line">          &gt;&lt;&#x2F;el-button&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            round</span><br><span class="line">            class&#x3D;&quot;el-icon-arrow-down sort_button&quot;</span><br><span class="line">            :disabled&#x3D;&quot;downDisAbled&quot;</span><br><span class="line">            @click&#x3D;&quot;handleToDown&quot;</span><br><span class="line">            style&#x3D;&quot;margin:10px 0&quot;</span><br><span class="line">          &gt;&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;&#x2F;el-col&gt;</span><br><span class="line">      &lt;&#x2F;el-row&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">        &lt;Button @click&#x3D;&quot;cancleSet&quot;&gt;取 消&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setTableTitle&quot;&gt;确 定&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;Modal&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [</span><br><span class="line">    &quot;routerPath&quot;,</span><br><span class="line">    &quot;routerPath1&quot;,</span><br><span class="line">    &quot;chuansuoDialogVisible&quot;,</span><br><span class="line">    &quot;theadDateReal&quot;</span><br><span class="line">  ],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: [],</span><br><span class="line">      value: [],</span><br><span class="line">      upDisAbled: true,</span><br><span class="line">      downDisAbled: true,</span><br><span class="line">      tempSelectionKeys: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; updated() &#123;</span><br><span class="line">  &#x2F;&#x2F;   this.showTableTitleDialog();</span><br><span class="line">  &#x2F;&#x2F; &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    chuansuoDialogVisible: function(val) &#123;</span><br><span class="line">      if (val) &#123;</span><br><span class="line">        this.showTableTitleDialog();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 穿梭框右侧选中改变触发的事件</span><br><span class="line">    rightCheck(selectionKeys, changeKeys) &#123;</span><br><span class="line">      this.tempSelectionKeys &#x3D; selectionKeys;</span><br><span class="line">      if (selectionKeys.length &gt; 0) &#123;</span><br><span class="line">        this.upDisAbled &#x3D; false;</span><br><span class="line">        this.downDisAbled &#x3D; false;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.upDisAbled &#x3D; true;</span><br><span class="line">        this.downDisAbled &#x3D; true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 选项上移</span><br><span class="line">    handleToUp() &#123;</span><br><span class="line">      if (this.tempSelectionKeys.length &gt; 1) &#123;</span><br><span class="line">        this.$Message.warning(&quot;仅支持单选调顺序&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      let indexNum &#x3D; 0;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; this.tempSelectionKeys.length; i++) &#123;</span><br><span class="line">        indexNum &#x3D; this.value.indexOf(this.tempSelectionKeys[i]);</span><br><span class="line">        if (indexNum &gt; 0) &#123;</span><br><span class="line">          this.value.splice(indexNum - 1, 0, this.tempSelectionKeys[i]);</span><br><span class="line">          this.value.splice(indexNum + 1, 1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 选项下移</span><br><span class="line">    handleToDown() &#123;</span><br><span class="line">      if (this.tempSelectionKeys.length &gt; 1) &#123;</span><br><span class="line">        this.$Message.warning(&quot;仅支持单选调顺序&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      let indexNum &#x3D; 0;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; this.tempSelectionKeys.length; i++) &#123;</span><br><span class="line">        indexNum &#x3D; this.value.indexOf(this.tempSelectionKeys[i]);</span><br><span class="line">        if (indexNum &gt; -1 &amp;&amp; indexNum !&#x3D;&#x3D; this.value.length - 1) &#123;</span><br><span class="line">          this.value.splice(indexNum + 2, 0, this.tempSelectionKeys[i]);</span><br><span class="line">          this.value.splice(indexNum, 1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 设置表头点击取消</span><br><span class="line">    cancleSet() &#123;</span><br><span class="line">      this.value &#x3D; [];</span><br><span class="line">      this.$emit(&quot;update:chuansuoDialogVisible&quot;, false);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 显示弹出框穿梭框中的字段</span><br><span class="line">    showTableTitleDialog() &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        url: &quot;&#x2F;dtsum&#x2F;zongtong&#x2F;basic&#x2F;CommonController&#x2F;setFormView&quot;,</span><br><span class="line">        method: &quot;get&quot;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          router: this.routerPath</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          if (res.data.success &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; 穿梭框</span><br><span class="line">            const data &#x3D; [];</span><br><span class="line">            const cities &#x3D; res.data.body.allFields;</span><br><span class="line">            cities.forEach((city, index) &#x3D;&gt; &#123;</span><br><span class="line">              data.push(&#123;</span><br><span class="line">                label: city.fieldName,</span><br><span class="line">                key: city.fieldId</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            this.data &#x3D; data;</span><br><span class="line">            for (let i &#x3D; 0; i &lt; res.data.body.needFields.length; i++) &#123;</span><br><span class="line">              this.value.push(res.data.body.needFields[i].fieldId);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 设置表格头显示字段</span><br><span class="line">    setTableTitle() &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        url: &quot;&#x2F;dtsum&#x2F;zongtong&#x2F;basic&#x2F;CommonController&#x2F;editForm&quot;,</span><br><span class="line">        method: &quot;get&quot;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          router: this.routerPath,</span><br><span class="line">          fieldIdList: this.value</span><br><span class="line">        &#125;,</span><br><span class="line">        paramsSerializer: (params) &#x3D;&gt; &#123;</span><br><span class="line">          return this.qs.stringify(params, &#123; indices: false &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            if (res.data.success &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">              this.$Message.success(res.data.msg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$Message.error(res.data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">            this.value.length &#x3D; 0;</span><br><span class="line">            this.$emit(&quot;theadDateReal&quot;, this.theadDateReal.length &#x3D; 0);</span><br><span class="line">            resolve();</span><br><span class="line">          &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">            this.noShow();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    noShow() &#123;</span><br><span class="line">      this.$emit(&quot;update:chuansuoDialogVisible&quot;, false); &#x2F;&#x2F;更新父组件变量</span><br><span class="line">      this.$emit(&quot;tableDataList&quot;);  &#x2F;&#x2F;调用父组件的方法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表格设置组件化的具体实现，利用element-ui的穿梭框组件，修改为适用于项目可以调整顺序的组件&lt;/p&gt;
&lt;h2 id=&quot;一、非完美写法&quot;&gt;&lt;a href=&quot;#一、非完美写法&quot; class=&quot;headerlink&quot; title=&quot;一、非完美写法&quot;&gt;&lt;/a&gt;一、非完美写法&lt;</summary>
      
    
    
    
    <category term="element-ui" scheme="http://example.com/categories/element-ui/"/>
    
    
  </entry>
  
  <entry>
    <title>监控大屏自适应</title>
    <link href="http://example.com/2021/07/20/%E9%A1%B5%E9%9D%A2%E5%A4%A7%E5%9B%BE%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://example.com/2021/07/20/%E9%A1%B5%E9%9D%A2%E5%A4%A7%E5%9B%BE%E8%87%AA%E9%80%82%E5%BA%94/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-10-13T03:23:00.158Z</updated>
    
    <content type="html"><![CDATA[<p>监控大图的制作主要考虑自适应的问题，根据屏幕大小进行自动伸缩的一个功能。制作大图可以选择使用rem布局和百分比布局，如果选择使用rem布局，可以在前端配置一个postcss-px2rem ，px2rem-loader进行适配，可以scss直接以方法的形式定义变量，在css代码中则使用px2rem(20px)来定义宽高。</p><p>做大图时会遇到图表的一个自适应，默认向echarts图表是不会自适应的，需要自己手动设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref&#x3D;&quot;harvest&quot; id&#x3D;&quot;shape&quot; style&#x3D;&quot;width:100%;height:350px&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">resizeTimer: null,</span><br><span class="line">        harvest: null,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        let harvest &#x3D; this.$echarts.init(this.$refs.harvest);</span><br><span class="line">      let _this &#x3D; this;</span><br><span class="line">      _this.harvest &#x3D; harvest;</span><br><span class="line">         harvest.setOption(this.makeOption());</span><br><span class="line">        </span><br><span class="line">         window.addEventListener(&quot;resize&quot;, function() &#123;</span><br><span class="line">            if (_this.resizeTimer) &#123;</span><br><span class="line">              clearTimeout(_this.resizeTimer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (_this.harvest) &#123;</span><br><span class="line">              _this.resizeTimer &#x3D; setTimeout(function() &#123;</span><br><span class="line">                _this.harvest.resize();</span><br><span class="line">              &#125;, 100);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;监控大图的制作主要考虑自适应的问题，根据屏幕大小进行自动伸缩的一个功能。制作大图可以选择使用rem布局和百分比布局，如果选择使用rem布局，可以在前端配置一个postcss-px2rem ，px2rem-loader进行适配，可以scss直接以方法的形式定义变量，在css代</summary>
      
    
    
    
    <category term="大屏" scheme="http://example.com/categories/%E5%A4%A7%E5%B1%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="http://example.com/2021/07/20/Vue%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/20/Vue%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2022-12-28T08:01:21.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Vue和React（基于自我可以理解的程度）"><a href="#一、Vue和React（基于自我可以理解的程度）" class="headerlink" title="一、Vue和React（基于自我可以理解的程度）"></a>一、Vue和React（基于自我可以理解的程度）</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>1.在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。在 Vue 应用中，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。</p><p>2.在 React 中，一切都是 JavaScript。不仅仅是 HTML 可以用 JSX 来表达，现在的潮流也越来越多地将 CSS 也纳入到 JavaScript 中来处理。Vue 的整体思想是拥抱经典的 Web 技术，整体上还是html，js，css三部分</p><p>3.在 React 中，所有的组件的渲染功能都依靠 JSX渲染函数。JSX 是使用 XML 语法编写 JavaScript 的一种语法糖。事实上 Vue 也提供了<a href="https://cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>，甚至<a href="https://cn.vuejs.org/v2/guide/render-function.html#JSX">支持 JSX</a>。然而，我们默认推荐的还是模板。</p><p>4.更抽象一点来看，我们可以把组件区分为两类：一类是偏视图表现的 (presentational)，一类则是偏逻辑的 (logical)。我们推荐在前者中使用模板，在后者中使用 JSX 或渲染函数。</p><p>5.Vue 提供了 <a href="https://github.com/vuejs/vue-cli">CLI 脚手架</a>，能让你通过交互式的脚手架引导非常容易地构建项目。React 在这方面也提供了 <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>，但是现在还存在一些局限性：它不允许在项目生成时进行任何配置；它只提供一个构建单页面应用的默认选项，而 Vue 提供了各种用途的模板</p><p>6.React Native 能使你用相同的组件模型编写有本地渲染能力的 APP (iOS 和 Android)，能同时跨多平台开发。Vue 和 <a href="https://weex.apache.org/">Weex</a> 会进行官方合作，Weex 是阿里巴巴发起的跨平台用户界面开发框架，Weex 允许你使用 Vue 语法开发不仅仅可以运行在浏览器端，还能被用于开发 iOS 和 Android 上的原生应用的组件。在现在，Weex 还在积极发展，成熟度也不能和 React Native 相抗衡。</p><h3 id="相同之处："><a href="#相同之处：" class="headerlink" title="相同之处："></a>相同之处：</h3><p>1.使用Virtual DOM</p><p>2.将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</p><p>3.都是单向数据流</p><h2 id="二、VUE"><a href="#二、VUE" class="headerlink" title="二、VUE"></a>二、VUE</h2><h3 id="1-双向数据绑定和单向数据流"><a href="#1-双向数据绑定和单向数据流" class="headerlink" title="1.双向数据绑定和单向数据流"></a>1.双向数据绑定和单向数据流</h3><p>这两个是不同的概念，双向绑定是model改变view自动更新，view改变model自动更新；而单向数据流指的父组件传值给子组件，子组件不能修改这个值，而父组件修改这个值的话子组件也会受影响，这个影响是单向的，只能从父组件流向子组件，不能反向。</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>表单的v-model，用户对View层的更改会直接同步到Model层。实际上v-model只是v-bind:value 和 v-on:input的语法糖，我们也可以采取类似react的单向绑定。</p><h3 id="2-计算属性"><a href="#2-计算属性" class="headerlink" title="2.计算属性"></a>2.计算属性</h3><p>如果模板不在是简单声明，而是复杂的逻辑，就需要计算属性computed，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#example&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    &#x2F;&#x2F; 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      &#x2F;&#x2F; &#96;this&#96; 指向 vm 实例</span><br><span class="line">      return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。</p><h4 id="2-1计算属性和方法"><a href="#2-1计算属性和方法" class="headerlink" title="2.1计算属性和方法"></a>2.1计算属性和方法</h4><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><h4 id="2-2计算属性和侦听属性"><a href="#2-2计算属性和侦听属性" class="headerlink" title="2.2计算属性和侦听属性"></a>2.2计算属性和侦听属性</h4><p>当你有一些数据需要随着其它数据变动而变动时，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code></p><h4 id="2-3计算属性的setter"><a href="#2-3计算属性的setter" class="headerlink" title="2.3计算属性的setter"></a>2.3计算属性的setter</h4><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    &#x2F;&#x2F; getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &#39; &#39; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names &#x3D; newValue.split(&#39; &#39;)</span><br><span class="line">      this.firstName &#x3D; names[0]</span><br><span class="line">      this.lastName &#x3D; names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4侦听器"><a href="#2-4侦听器" class="headerlink" title="2.4侦听器"></a>2.4侦听器</h4><p>虽然计算属性在大多数情况下更合适，但当需要在数据变化时执行异步或开销较大的操作时还需要侦听器。</p><h3 id="3-v-if和v-show"><a href="#3-v-if和v-show" class="headerlink" title="3.v-if和v-show"></a>3.v-if和v-show</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="4-v-if和v-for"><a href="#4-v-if和v-for" class="headerlink" title="4.v-if和v-for"></a>4.v-if和v-for</h3><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。VUE3中vi-if优先级高于v-for，使用时可能会报错</p><h3 id="5-全家桶"><a href="#5-全家桶" class="headerlink" title="5.全家桶"></a>5.全家桶</h3><p>Vue+Vue-router+Vuex+axios</p><h3 id="6-route和router的区别"><a href="#6-route和router的区别" class="headerlink" title="6.route和router的区别"></a>6.route和router的区别</h3><h4 id="route对象"><a href="#route对象" class="headerlink" title="$route对象"></a>$route对象</h4><p> $route对象表示当前的路由信息，包含了当前 URL 解析得到的信息。包含当前的路径，参数，query对象等。</p><p> <strong>1.</strong>  <strong>$route.path</strong>   字符串，对应当前路由的路径，总是解析为绝对路径，如”/foo/bar”。</p><p>  <strong>2.</strong>  <strong>$route.params</strong>   一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。name</p><p>  <strong>3.</strong>  <strong>$route.query</strong>   一个 key/value 对象，表示 URL 查询参数。   例如，对于路径 /foo?user=1，则有$route.query.user == 1，   如果没有查询参数，则是个空对象。path</p><p>  <strong>4.</strong>  <strong>$route.hash</strong>   当前路由的hash值 (不带#) ，如果没有 hash 值，则为空字符串。锚点*</p><p>  <strong>5.</strong>  <strong>$route.fullPath</strong>   完成解析后的 URL，包含查询参数和hash的完整路径。</p><p>  <strong>6.</strong>  <strong>$route.matched</strong>   数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</p><p>  <strong>7.</strong>  <strong>$route.name</strong>  当前路径名字</p><p>  <strong>8.</strong>  <strong>$route.meta</strong> 路由元信息</p><h4 id="router对象"><a href="#router对象" class="headerlink" title="$router对象"></a><strong>$router对象</strong></h4><p>$router对象是全局路由的实例，是router构造方法的实例。</p><h5 id="1、push"><a href="#1、push" class="headerlink" title="1、push"></a><strong>1、push</strong></h5><p>  (1)字符串this.$router.push(‘home’)</p><p>  (2)对象this.$router.push({path:’home’})</p><p>  (3)命名的路由this.$router.push({name:’user’,params:{userId:123}})</p><p>  (4)带查询参数，变成 /register?plan=123this.$router.push({path:’register’,query:{plan:’123’}})</p><p>​       push方法其实和<router-link :to="...">是等同的。</p><p>  注意：push方法的跳转会向 history 栈添加一个新的记录，当我们点击浏览器的返回按钮时可以看到之前的页面。</p><h5 id="2、go"><a href="#2、go" class="headerlink" title="2、go"></a><strong>2、go</strong></h5><p>   页面路由跳转，前进或者后退this.$router.go(-1) // 后退</p><h5 id="3、replace"><a href="#3、replace" class="headerlink" title="3、replace"></a>3、replace</h5><p>  push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，</p><p>  不会向 history 栈添加一个新的记录</p><h3 id="7-vue-js的两个核心是什么"><a href="#7-vue-js的两个核心是什么" class="headerlink" title="7.vue.js的两个核心是什么"></a>7.vue.js的两个核心是什么</h3><p>1.数据驱动，也叫双向数据绑定。</p><p>2.组件系统，vue组件的核心选项:</p><ul><li><p>1、模板（template）：模板声明了数据和最终展现给用户的DOM之间的映射关系。</p></li><li><p>2、初始数据（data）：一个组件的初始数据状态。对于可复用的组件来说，这通常是私有的状态。</p></li><li><p>3、接受的外部参数(props)：组件之间通过参数来进行数据的传递和共享。</p></li><li><p>4、方法（methods）：对数据的改动操作一般都在组件的方法内进行。</p></li><li><p>5、生命周期钩子函数（lifecycle hooks）：一个组件会触发多个生命周期钩子函数，最新2.0版本对于生命周期函数名称改动很大。</p></li><li><p>6、私有资源（assets）：Vue.js当中将用户自定义的指令、过滤器、组件等统称为资源。一个组件可以声明自己的私有资源。私有资源只有该组件和它的子组件可以调用。</p></li></ul><h3 id="8-单页面和多页面"><a href="#8-单页面和多页面" class="headerlink" title="8.单页面和多页面"></a>8.单页面和多页面</h3><p><strong>单页面应用</strong>（SPA)</p><p>一个项目中只有一个完整的html页面，其他的都是部分的html片段组成。页面跳转只是局部刷新，不会重新加载全部资源。片段之间的切换快，比较容易实现转场动画。</p><p>eg：Vue，React</p><p>优点：</p><p>1.没有页面之间的切换，就不会出现“白屏现象”，也不会出现假死并有“闪烁”现象，页面显示流畅，web应用更具响应性和更令人着迷。</p><p>2.良好的前后端工作分离模式：后端不再负责模板渲染、输出页面工作，后端API通用化，即同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端。</p><p>3.减轻服务器压力：单页应用相对服务器压力小，服务器只用出数据就可以，不用管展示逻辑和页面合成，吞吐能力会提高几倍。</p><p>缺点：</p><p>1.首屏加载慢：如果不对路由进行处理，在加载首页的时候，就会将所有组件全部加载，并向服务器请求数据，这必将拖慢加载速度；</p><p>解决方案：</p><p>​    1.Vue-router懒加载：只有当路由被访问时才会加载对应的组件，而不是在加载首页的时候就加载，</p><p>​    2.使用CDN加速</p><p>2.不利于seo</p><p>3.导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）</p><p><strong>多页面应用</strong>（MPA)</p><p>一个项目是由多个完整的html页面组成，页面跳转所有的资源都要重新加载，页面之间的切换会出现卡顿空白的问题，不容易实现切换动画等</p><p>eg：Vue配置打包多入口文件</p><img src="/2021/07/20/Vue%E5%9F%BA%E7%A1%80/1687094-20190513234650178-610052132.png" class="" title="这是一张图片"><h3 id="9-SSR（服务端渲染）"><a href="#9-SSR（服务端渲染）" class="headerlink" title="9.SSR（服务端渲染）"></a>9.SSR（服务端渲染）</h3><h4 id="客户端渲染："><a href="#客户端渲染：" class="headerlink" title="客户端渲染："></a>客户端渲染：</h4><p>在服务端放了一个html 页面，里面有客户端发起请求，服务端把页面（响应的是字符串）发送过去，客户端从上到下依次解析，如果在解析的过程中，发现ajax请求，再次像服务器发送新的请求，客户端拿到ajax 响应结果，模板引擎渲染。过程至少和服务端发起两次请求</p><h4 id="SSR：服务端渲染"><a href="#SSR：服务端渲染" class="headerlink" title="SSR：服务端渲染"></a>SSR：服务端渲染</h4><p>sever 端页面+数据，服务端过程：1.读取index.html 2.模版进行渲染，在发送给客户端之前，在服务端已经把index.html 渲染处理了。var 渲染结果 = tempeter.render(模板字符串，｛解析替换对象｝) response.end(渲染结果)，服务端响应的就是最总的结果</p><p>服务端只请求一次</p><p>多数网站既有服务端渲染又有客户端渲染</p><p>服务端渲染和客户端渲染的区别</p><ul><li>客户端渲染不利于 SEO 搜索引擎优化</li><li>服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的</li><li>所以你会发现真正的网站既不是纯异步也不是纯服务端渲染出来的，而是两者结合来做的</li><li>例如京东的商品列表就采用的是服务端渲染，目的了为了 SEO 搜索引擎优化</li><li>而它的商品评论列表为了用户体验，而且也不需要 SEO 优化，所以采用是客户端渲染</li></ul><h3 id="10-Vue-不能检测数组和对象的变化"><a href="#10-Vue-不能检测数组和对象的变化" class="headerlink" title="10.Vue 不能检测数组和对象的变化"></a>10.Vue <strong>不能检测</strong>数组和对象的变化</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>vue不能检测数组中的以下变动</p><p>1.当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></p><p>2.当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    items: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&#125;</span><br><span class="line">vm.items[1] &#x3D; &#39;x&#39; &#x2F;&#x2F; 不是响应性的</span><br><span class="line">vm.items.length &#x3D; 2 &#x2F;&#x2F; 不是响应性的</span><br></pre></td></tr></table></figure><p>解决第一类问题可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line">2.vm.items.splice(indexOfItem, 1, newValue)</span><br><span class="line">3.vm.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><p>解决第二类问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。</p><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, &#39;b&#39;, 2)</span><br></pre></td></tr></table></figure><p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$set(this.someObject,&#39;b&#39;,2)</span><br></pre></td></tr></table></figure><p>有时你可能需要为已有对象赋值多个新 property，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 代替 &#96;Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)&#96;</span><br><span class="line">this.someObject &#x3D; Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</span><br></pre></td></tr></table></figure><h3 id="11-Vue深度监听对象"><a href="#11-Vue深度监听对象" class="headerlink" title="11.Vue深度监听对象"></a>11.Vue深度监听对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  obj:&#123; <span class="comment">//监听的对象</span></span><br><span class="line">    deep:<span class="literal">true</span>, <span class="comment">//深度监听设置为 true</span></span><br><span class="line">    handler:<span class="function"><span class="keyword">function</span>(<span class="params">newV,oldV</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;watch中：&#x27;</span>,newV)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-父组件改变子组件的样式"><a href="#12-父组件改变子组件的样式" class="headerlink" title="12.父组件改变子组件的样式"></a>12.父组件改变子组件的样式</h3><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footEr</span>&gt;</span><span class="tag">&lt;/<span class="name">footEr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> footEr <span class="keyword">from</span> <span class="string">&#x27;../../components/foot.vue&#x27;</span></span></span><br><span class="line">        components: &#123;footEr&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.cont</span> &gt;&gt;&gt; <span class="selector-class">.index</span> &#123;　　　　<span class="comment">/*cont是父组件包裹子组件的类名，index是子组件中要修改样式的类名*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#2a82e4</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//如果是有些像Sass、less之类的预处理器无法正确解析 &gt;&gt;&gt; 。这种情况下你可以使用 /deep/ 操作符取而代之——这是一个 &gt;&gt;&gt; 的别名</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.cont</span>&#123;</span></span><br><span class="line"><span class="css">  /<span class="selector-tag">deep</span>/ <span class="selector-class">.index</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2a82e4</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-Vue-use"><a href="#13-Vue-use" class="headerlink" title="13.Vue.use()"></a>13.Vue.use()</h3><p>安装 Vue.js 插件。如果插件是一个对象，必须提供 <code>install</code> 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。</p><h3 id="14-VUE的优化"><a href="#14-VUE的优化" class="headerlink" title="14.VUE的优化"></a>14.VUE的优化</h3><p>1.v-if和v-show的区分使用，频繁切换使用v-show。</p><p>2.computed和watch的区分使用。computed是依赖值发生变化后才会重新计算，watch可以实现数据变化时执行异步操作。</p><p>3.v-for遍历必须添加key值，设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p><p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;推荐：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for&#x3D;&quot;user in activeUsers&quot;</span><br><span class="line">    :key&#x3D;&quot;user.id&quot;&gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">  activeUsers: function () &#123;</span><br><span class="line">    return this.users.filter(function (user) &#123;</span><br><span class="line">     return user.isActive</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;不推荐：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for&#x3D;&quot;user in users&quot;</span><br><span class="line">    v-if&#x3D;&quot;user.isActive&quot;</span><br><span class="line">    :key&#x3D;&quot;user.id&quot;&gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>4.利用冻结数据</p><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    users: &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.users = <span class="built_in">Object</span>.freeze(users);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5.事件销毁：js监听事件的销毁，定时器的销毁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  removeEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.click, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.图片资源懒加载</p><p>将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载，们在项目中使用 Vue 的 vue-lazyload 插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.npm install vue-lazyload --save-dev</span><br><span class="line">2.在main.js中全局引入</span><br><span class="line">import VueLazyLoad from &#x27;vue-lazyload&#x27;</span><br><span class="line">Vue.use(VueLazyLoad, &#123;</span><br><span class="line">  preLoad: 1,</span><br><span class="line">  error: require(&#x27;./assets/img/error.jpg&#x27;),</span><br><span class="line">  loading: require(&#x27;./assets/img/homePage_top.jpg&#x27;),</span><br><span class="line">  attempt: 2,</span><br><span class="line"> &#125;)</span><br><span class="line">3.lazyloadDemo.vue（页面中）使用：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 768px;&quot;</span>&gt;</span> //img标签中使用懒加载：v-lazy 代替 v-bind:src</span><br><span class="line">//:key=&quot;&quot; 必须要加，否则就会出现，页面刷新，其他内容都刷新了，但是只有图片不刷新的情况。因为key可能相同，所以页面不会更新！</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in imgList&quot;</span> <span class="attr">v-lazy:background-image</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> //背景图片</span><br></pre></td></tr></table></figure><p>7.路由懒加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.非懒加载</span><br><span class="line">import Login from &#39;@&#x2F;components&#x2F;login&#39;</span><br><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;login&quot;,</span><br><span class="line">    name: &quot;Login&quot;,</span><br><span class="line">    component: Login,</span><br><span class="line">&#125;,</span><br><span class="line">2.懒加载</span><br><span class="line">&#123;</span><br><span class="line">    path: &quot;&#x2F;index&quot;, &#x2F;&#x2F; 首页</span><br><span class="line">    name: &quot;Index&quot;,</span><br><span class="line">    component: (resolve) &#x3D;&gt; require([&quot;..&#x2F;views&#x2F;pages&#x2F;index&quot;], resolve),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &quot;首页&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">或者（按组件分块）</span><br><span class="line">const Foo &#x3D; () &#x3D;&gt; import(&#39;.&#x2F;Foo.vue&#39;)</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;foo&#39;, component: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>8.使用keep-alive，用来对组件进行缓存，从而节省性能。</p><h3 id="15-beforeRouteEnter"><a href="#15-beforeRouteEnter" class="headerlink" title="15.beforeRouteEnter"></a>15.beforeRouteEnter</h3><p>不能获取组件实例this，因为当前守卫执行前，组件实例还未创建，next(vm =&gt; {}）进行回调访问，在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">&#x27;weightDetail&#x27;</span>) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">        vm.shuka()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="16-nextTrick"><a href="#16-nextTrick" class="headerlink" title="16.nextTrick()"></a>16.nextTrick()</h3><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.DOM 更新循环是指什么？</span><br><span class="line">2.下次更新循环是什么时候？</span><br><span class="line">3.修改数据之后使用，是加快了数据更新进度吗？</span><br><span class="line">4.在什么情况下要用到？</span><br></pre></td></tr></table></figure><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>Vue 实现响应式并<strong>不是数据发生变化之后 DOM 立即变化</strong>，而是按一定的策略进行 DOM 的更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</span><br><span class="line">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</span><br><span class="line">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</span><br><span class="line">（4）主线程不断重复上面的第三步。</span><br></pre></td></tr></table></figure><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>简单来说，Vue 在修改数据后，视图不会立刻更新，而是等<strong>同一事件循环</strong>中的所有数据变化完成之后，再统一进行视图更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;改变数据</span><br><span class="line">vm.message &#x3D; &#39;changed&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新</span><br><span class="line">console.log(vm.$el.textContent) &#x2F;&#x2F; 并不会得到&#39;changed&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这样可以，nextTick里面的代码会在DOM更新后执行</span><br><span class="line">Vue.nextTick(function()&#123;</span><br><span class="line">    console.log(vm.$el.textContent) &#x2F;&#x2F;可以得到&#39;changed&#39;</span><br></pre></td></tr></table></figure><img src="/2021/07/20/Vue%E5%9F%BA%E7%A1%80/bV17xC-1626001240832" class="" title="这是一张图片"><p>第一个 tick（图例中第一个步骤，即’本次更新循环’）：</p><ol><li>首先修改数据，这是同步任务。同一事件循环的所有的同步任务都在主线程上执行，形成一个执行栈，此时还未涉及 DOM 。</li><li>Vue 开启一个异步队列，并缓冲在此事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</li></ol><p>第二个 tick（图例中第二个步骤，即’下次更新循环’）：</p><p>同步任务执行完毕，开始执行异步 watcher 队列的任务，更新 DOM 。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel 方法，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。</p><p>第三个 tick（图例中第三个步骤）：</p><p>此时就是文档所说的</p><blockquote><p>下次 DOM 更新循环结束之后</p></blockquote><p>此时通过 Vue.nextTick 获取到改变后的 DOM 。通过 setTimeout(fn, 0) 也可以同样获取到。</p><hr><p>简单总结事件循环：</p><p>同步代码执行 -&gt; 查找异步队列，推入执行栈，执行Vue.nextTick[事件循环1] -&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件循环2]…</p><p>总之，异步是单独的一个tick，不会和同步在一个 tick 里发生，也是 DOM 不会马上改变的原因。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><blockquote><p>应用场景：需要在视图更新之后，基于新的视图进行操作。</p></blockquote><h4 id="created、mounted"><a href="#created、mounted" class="headerlink" title="created、mounted"></a>created、mounted</h4><p>需要注意的是，在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。</p><p>官方文档说明：</p><blockquote><p>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted: function () &#123;</span><br><span class="line">  this.$nextTick(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; Code that will run only after the</span><br><span class="line">    &#x2F;&#x2F; entire view has been rendered</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他应用场景"><a href="#其他应用场景" class="headerlink" title="其他应用场景"></a>其他应用场景</h4><p>其他应用场景如下三例：</p><p>例子1：</p><p>点击按钮显示原本以 v-show = false 隐藏起来的输入框，并获取焦点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">showsou()&#123;</span><br><span class="line">  this.showit &#x3D; true &#x2F;&#x2F;修改 v-show</span><br><span class="line">  document.getElementById(&quot;keywords&quot;).focus()  &#x2F;&#x2F;在第一个 tick 里，获取不到输入框，自然也获取不到焦点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">showsou()&#123;</span><br><span class="line">  this.showit &#x3D; true</span><br><span class="line">  this.$nextTick(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; DOM 更新了</span><br><span class="line">    document.getElementById(&quot;keywords&quot;).focus()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-Vue父子组件传值"><a href="#17-Vue父子组件传值" class="headerlink" title="17.Vue父子组件传值"></a>17.Vue父子组件传值</h3><p>1.props/$emit/ref/$parent/$child</p><p>2.provide/inject</p><p>vue组件的深层次传值，允许一个祖先组件向其所有<a href="https://links.jianshu.com/go?to=https://www.baidu.com/s?wd=%E5%AD%90%E5%AD%99%E5%90%8E%E4%BB%A3&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">子孙后代</a>注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效<br> <em>provide 选项允许我们指定我们想要提供给后代组件的数据/方法</em><br> provide 选项应该是一个对象或返回一个对象的函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getMap: <span class="built_in">this</span>.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者 </span></span><br><span class="line">provide: &#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：</strong><br> <em>inject 选项应该是：</em><br> 一个字符串数组，或一个对象，对象的 key 是本地的绑定名，value 是：<br> 在可用的注入内容中搜索用的 key (字符串或 Symbol)，或<br> 一个对象，该对象的：<br> from 属性是在可用的注入内容中搜索用的 key (字符串或 Symbol)<br> default 属性是降级情况下使用的 value:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [<span class="string">&#x27;getMap&#x27;</span>]</span><br></pre></td></tr></table></figure><p>3.eventBus事件总线</p><p><code>EventBus</code> 又称为事件总线。在Vue中可以使用 <code>EventBus</code> 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的“灾难”，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。</p><p>自己写或者npm包</p><p><a href="https://zhuanlan.zhihu.com/p/72777951">https://zhuanlan.zhihu.com/p/72777951</a></p><h3 id="18-vue修饰符"><a href="#18-vue修饰符" class="headerlink" title="18.vue修饰符"></a>18.vue修饰符</h3><p>1..sync译为同步</p><p>使用前提：</p><p>首先，我们需要明确的是，子父组件之间通讯，子组件是不能直接改变父组件的值的。（父组件是大佬，小弟不能改变大佬的值，但是父组件可以改变子组件的值）</p><p>作用：</p><p>通过某种方式，子组件可以”直接“改变父组件的值。</p><p>方法：</p><p>场景：控制弹框的显示与关闭。在父组件中打开子组件弹框，然后在点击子组件中的按钮关闭弹框。</p><p>事件修饰符：</p><ol><li> .stop阻止单击事件继续传播</li><li> .prevent阻止默认事件</li><li> .capture事件优先处理，先在此处处理</li><li> .once事件只执行一次 </li><li> .self自身触发事件</li></ol><p>按键修饰符：</p><p>.enter、.tab、.space、.up、.down、.left、.right</p><h3 id="19-vue-router的钩子函数"><a href="#19-vue-router的钩子函数" class="headerlink" title="19.vue-router的钩子函数"></a>19.vue-router的钩子函数</h3><p>路由钩子函数有三种：</p><p>​      1：全局钩子： beforeEach、 afterEach、beforeResolve</p><p>​      2：单个路由里面的钩子：  beforeEnter（写在路由配置中）</p><p>​      3：组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p><h3 id="20-created和watch谁先执行"><a href="#20-created和watch谁先执行" class="headerlink" title="20.created和watch谁先执行"></a>20.created和watch谁先执行</h3><p>如果watch 加了 immediate: true, 就是watch先执行，否则就是created 先执行</p><h3 id="21-v-for为何要绑定唯一的key值"><a href="#21-v-for为何要绑定唯一的key值" class="headerlink" title="21.v-for为何要绑定唯一的key值"></a>21.v-for为何要绑定唯一的key值</h3><p>使用v-for更新已渲染的元素列表时,默认用就地复用策略;列表数据修改的时候,他会根据key值去判断某个值是否修改,如果修改,则重新渲染这一项,否则复用之前的元素。</p><p>key值一般不建议使用索引值index，因为如果在中插入了某一项的话，后边的数据值就不能复用，需要重新渲染，一般会选择唯一去确定某一项的id值。</p><h3 id="22-webpack集成脚手架以及常用loader，是什么样的一个东西"><a href="#22-webpack集成脚手架以及常用loader，是什么样的一个东西" class="headerlink" title="22.webpack集成脚手架以及常用loader，是什么样的一个东西"></a>22.webpack集成脚手架以及常用loader，是什么样的一个东西</h3><h3 id="23-px2rem基于什么的插件"><a href="#23-px2rem基于什么的插件" class="headerlink" title="23.px2rem基于什么的插件"></a>23.px2rem基于什么的插件</h3><h3 id="24-wacth用在哪种场景，可以监听哪里的，除了data"><a href="#24-wacth用在哪种场景，可以监听哪里的，除了data" class="headerlink" title="24.wacth用在哪种场景，可以监听哪里的，除了data"></a>24.wacth用在哪种场景，可以监听哪里的，除了data</h3><p>watch试用于一个数据影响多个数据，而computed是一个数据受多个数据的影响。</p><p>父子组件传值，子组件监听父组件值的变化</p><p>vue中的watch监听，除了监听data中的数据 。还可以监听 props 、$route 、$emit 、computed</p><h2 id="25-vue自定义指令展示模态框"><a href="#25-vue自定义指令展示模态框" class="headerlink" title="25.vue自定义指令展示模态框"></a>25.vue自定义指令展示模态框</h2><p><a href="https://www.jb51.net/article/145514.htm">https://www.jb51.net/article/145514.htm</a></p><h2 id="26-路由传参"><a href="#26-路由传参" class="headerlink" title="26.路由传参"></a>26.路由传参</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;路由配置文件中 配置动态路由</span><br><span class="line">&#123;</span><br><span class="line">     path: &#39;&#x2F;detail&#x2F;:id&#39;,</span><br><span class="line">     name: &#39;Detail&#39;,</span><br><span class="line">     component: Detail</span><br><span class="line">   &#125;</span><br><span class="line">&#x2F;&#x2F;动态路由一般传一个参数居多</span><br><span class="line">var id &#x3D; 1;</span><br><span class="line">this.$router.push(&#39;&#x2F;detail&#x2F;&#39; + id)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;页面刷新参数不会丢失，路由路径，传一个或多个</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  path: &#39;&#x2F;detail&#39;,</span><br><span class="line">  query: &#123;</span><br><span class="line">    name: &#39;张三&#39;，</span><br><span class="line">    id: 1,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;页面刷新，参数丢失，路由名称，传一个或者多个</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  name: &#39;Detail&#39;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    name: &#39;张三&#39;，</span><br><span class="line">    id: 1,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h1><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。混入对象的钩子将在组件自身钩子<strong>之前</strong>调用。混入对象和组件对象两个对象键名冲突时，取组件对象的键值对。</p><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><p>当我们存在多个组件中的数据或者功能很相近时，我们就可以利用mixins将公共部分提取出来，通过 mixins封装的函数，组件调用他们是不会改变函数作用域外部的。避免每个需要相同功能的组件声明重复的data、methods、钩子函数</p><p>例如：假设我们需要在每个组件上添加name和time。在created、destroyed时,打出提示，并给出存活时间。</p><p>一共有五个组件，请问怎么做？<br> 做法1：给每个组件添加data和created, destroyed钩子，重复5次<br> 做法2：使用mixin减少重复。</p><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在某个路径下新建 myMixins.js，因为mixin是一个对象，因为要以对象的形式来定义myMixins，对象中我们可以和vue组件一样来定义我们的data、components、methods 、created、computed等属性，并通过export导出该对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">computed</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a.vue中</span></span><br><span class="line"><span class="keyword">import</span> autoResize <span class="keyword">from</span> <span class="string">&#x27;./myMixins.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [autoResize]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>方法和参数在各组件中不共享，虽然组件调用了mixins并将其属性合并到自身组件中来了，但是其属性只会被当前组件所识别并不会被共享。</p><h2 id="引入多个mixin："><a href="#引入多个mixin：" class="headerlink" title="引入多个mixin："></a>引入多个mixin：</h2><p>同时引入多个 mixins: [mixinsTest2,mixinsTest]</p><p>在使用局部注册的时候，可同时引入多个混入对象，执行顺序和引入顺序一致。</p><p><code>结论：</code> 引入多个以后，,我们先引入的先被使用，先引用，先使用！</p><h2 id="与vuex的区别"><a href="#与vuex的区别" class="headerlink" title="与vuex的区别"></a>与vuex的区别</h2><p>vuex：用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。</p><p>Mixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。</p><h2 id="与公共组件的区别"><a href="#与公共组件的区别" class="headerlink" title="与公共组件的区别"></a>与公共组件的区别</h2><p>组件：在父组件中引入组件，相当于在父组件中给出一片独立的空间供子组件使用，然后根据props来传值，但本质上两者是相对独立的。</p><p>Mixins：则是在引入Mixins之后，Mixins与组件中的属性和方法进行合并，相当于扩展了父组件的对象与方法，可以理解为形成了一个新的组件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Vue和React（基于自我可以理解的程度）&quot;&gt;&lt;a href=&quot;#一、Vue和React（基于自我可以理解的程度）&quot; class=&quot;headerlink&quot; title=&quot;一、Vue和React（基于自我可以理解的程度）&quot;&gt;&lt;/a&gt;一、Vue和React（基于</summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>手写数字键盘</title>
    <link href="http://example.com/2021/07/13/%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98/"/>
    <id>http://example.com/2021/07/13/%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2022-10-13T03:17:23.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字键盘"><a href="#数字键盘" class="headerlink" title="数字键盘"></a>数字键盘</h2><p>项目需求要在页面右侧固定一个数字键盘，然后自己手写了一个，现在还不是很完美，该案例不明白的地方和难点在于键盘删除以及输入框聚焦或默认弹出系统自带的键盘</p><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><img src="/2021/07/13/%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98/image-20210713113507029.png" class="" title="这是一张图片"><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyboard_content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyboard&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyboard_header&quot;</span>&gt;</span>填写重量<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keyBox&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickKeyBox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.keyboard</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">13.97rem</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">23.96rem</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#333333</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">1.09rem</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">   .keyboard_header &#123;</span><br><span class="line">     <span class="selector-tag">font-size</span>: 1.09<span class="selector-tag">rem</span>;</span><br><span class="line">     <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">     <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span><br><span class="line">     <span class="selector-tag">text-align</span>: <span class="selector-tag">left</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.keyBox</span> &#123;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">     <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">     <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">     div &#123;</span><br><span class="line">       <span class="selector-tag">width</span>: 3.49<span class="selector-tag">rem</span>;</span><br><span class="line">       <span class="selector-tag">height</span>: 3.49<span class="selector-tag">rem</span>;</span><br><span class="line">       <span class="selector-tag">background</span>: <span class="selector-id">#464646</span>;</span><br><span class="line">       <span class="selector-tag">border-radius</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line">       <span class="selector-tag">margin</span>: 0<span class="selector-tag">px</span> 0.66<span class="selector-tag">rem</span> 0.66<span class="selector-tag">rem</span> 0<span class="selector-tag">px</span>;</span><br><span class="line">       <span class="selector-tag">line-height</span>: 64<span class="selector-tag">px</span>;</span><br><span class="line">       <span class="selector-tag">font-size</span>: 26<span class="selector-tag">px</span>;</span><br><span class="line">       <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(255, 255, 255, 0.85);</span><br><span class="line">       &amp;<span class="selector-pseudo">:nth-child(3n)</span> &#123;</span><br><span class="line">         <span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该函数是为了确认要输入的输入框是哪个，绑定的变量是谁，data就是绑定的变量，在需要输入数值的input框聚焦时使用</span></span><br><span class="line"><span class="function"><span class="title">getFocus</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.bindInput = data</span><br><span class="line">    &#125;,</span><br><span class="line"> <span class="comment">// 点击键盘</span></span><br><span class="line"><span class="function"><span class="title">clickKeyBox</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 由于用了事件委托，所以导致点击数字方框其他区域也会触发该函数，所以通过长度来判断</span></span><br><span class="line">    <span class="comment">// 点击一个按钮只有一个数字才正常</span></span><br><span class="line">  <span class="keyword">if</span> (event.target.innerText.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 判断要在哪个输入框输入值，并将键盘点击的值赋值给相应的变量</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.bindInput === <span class="string">&#x27;aypCaseWeight&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//获取输入箱重的节点</span></span><br><span class="line">      <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;caseWeight&#x27;</span>)</span><br><span class="line">      <span class="comment">//获取输入框聚焦的位置</span></span><br><span class="line">      <span class="keyword">const</span> position = input.selectionStart</span><br><span class="line">      <span class="comment">//判断如果按钮是x，则需要删除</span></span><br><span class="line">      <span class="keyword">if</span> (event.target.innerText === <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">//删除直接用replace替换成&#x27;&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.aypCaseWeight = <span class="built_in">this</span>.aypCaseWeight.replace(</span><br><span class="line">            <span class="built_in">this</span>.aypCaseWeight[input.selectionStart - <span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;&#x27;</span></span><br><span class="line">          )</span><br><span class="line">          <span class="comment">//这个是为了实现删除之后光标聚焦的位置是删除时的位置，但是功能没有实现</span></span><br><span class="line">          <span class="keyword">if</span> (position !== <span class="built_in">this</span>.aypCaseWeight.length) &#123;</span><br><span class="line">            input.selectionStart = position - <span class="number">1</span></span><br><span class="line">            input.selectionEnd = position - <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.aypCaseWeight += event.target.innerText</span><br><span class="line">        &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.bindInput === <span class="string">&#x27;aypWeight&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.aypWeight += event.target.innerText</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//在向数组的某一个位置赋值时会出现undefined的情况，要将他替换掉</span></span><br><span class="line">        <span class="built_in">this</span>.aypNetWeightList[<span class="built_in">this</span>.bindInput] += event.target.innerText</span><br><span class="line">        <span class="keyword">const</span> data = <span class="built_in">this</span>.aypNetWeightList[<span class="built_in">this</span>.bindInput].replace(</span><br><span class="line">          <span class="string">&#x27;undefined&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//使用$set实现数据双向绑定</span></span><br><span class="line">        <span class="built_in">this</span>.$set(<span class="built_in">this</span>.aypNetWeightList, <span class="built_in">this</span>.bindInput, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>该实现方法可能只适用较少输入框的情况，且必须要明确输入框的位置，一定还有其他优化的办法，尚不知怎么去做</p><h4 id="解决输入框聚焦会弹出默认虚拟键盘"><a href="#解决输入框聚焦会弹出默认虚拟键盘" class="headerlink" title="解决输入框聚焦会弹出默认虚拟键盘"></a>解决输入框聚焦会弹出默认虚拟键盘</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法是聚焦时调用的方法</span></span><br><span class="line"><span class="function"><span class="title">getFocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取不需要弹出默认键盘输入框的节点，设置readonly为只读</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;weight&#x27;</span>).setAttribute(<span class="string">&#x27;readonly&#x27;</span>, <span class="string">&#x27;readonly&#x27;</span>)</span><br><span class="line">    <span class="comment">//因为还要继续向聚焦的输入框输入值，所以要在一定时间后移出这个属性</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;weight&#x27;</span>).removeAttribute(<span class="string">&#x27;readonly&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上还有这种解决办法，聚焦后立马失焦，认为满足不了场景需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.activeElement.blur();<span class="comment">//屏蔽默认键盘弹出；</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数字键盘&quot;&gt;&lt;a href=&quot;#数字键盘&quot; class=&quot;headerlink&quot; title=&quot;数字键盘&quot;&gt;&lt;/a&gt;数字键盘&lt;/h2&gt;&lt;p&gt;项目需求要在页面右侧固定一个数字键盘，然后自己手写了一个，现在还不是很完美，该案例不明白的地方和难点在于键盘删除以及输入框聚</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>日常随笔</title>
    <link href="http://example.com/2021/07/01/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/07/01/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2022-10-13T05:38:20.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>1.前端接受不到后端传来的sessionID的cookie值，可能是跨域问题，一般可以选择用代理proxy解决。</p><p>2.点击下载文件，如果文件直接被打开了，也有可能是跨域的问题。</p><p>3.打包时卡住不动，要在build下的check-version中注释掉一段，下边这一段（澳亚管理员端有遇到）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shell.which(<span class="string">&#x27;npm&#x27;</span>)) &#123;</span><br><span class="line">  versionRequirements.push(&#123;</span><br><span class="line">    name: <span class="string">&#x27;npm&#x27;</span>,</span><br><span class="line">    currentVersion: exec(<span class="string">&#x27;npm --version&#x27;</span>),</span><br><span class="line">    versionRequirement: packageConfig.engines.npm</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.制作时间轴时可以用ul-&gt;li来实现，颜色什么的动态数据绑定。后期因功能问题，选择使用Echarts图表来实现，根文件下有该实例。</p><p>5.点击哪个按钮，哪个按钮添加别的样式，可以通过三目运算符来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button :id&#x3D;&quot;state&#x3D;&#x3D;&#x3D;4?&#39;button-4&#39;:&#39;&#39;&quot; @click&#x3D;&quot;searchdevice(4)&quot;&gt;故障停机 256&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><p>6.点击显示全屏与退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">  &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;screen&quot;&gt;全屏&lt;&#x2F;el-button&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;index&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">     return&#123;</span><br><span class="line">      fullscreen: false</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">    screen()&#123;</span><br><span class="line">     let element &#x3D; document.getElementById(&quot;monitoring-outbox&quot;); &#x2F;&#x2F;最外层元素的id</span><br><span class="line">     if (this.fullscreen) &#123;</span><br><span class="line">      if (document.exitfullscreen) &#123;</span><br><span class="line">       document.exitfullscreen();</span><br><span class="line">      &#125; else if (document.webkitcancelfullscreen) &#123;</span><br><span class="line">       document.webkitcancelfullscreen();</span><br><span class="line">      &#125; else if (document.mozcancelfullscreen) &#123;</span><br><span class="line">       document.mozcancelfullscreen();</span><br><span class="line">      &#125; else if (document.msexitfullscreen) &#123;</span><br><span class="line">       document.msexitfullscreen();</span><br><span class="line">      &#125;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">      if (element.requestfullscreen) &#123;</span><br><span class="line">       element.requestfullscreen();</span><br><span class="line">      &#125; else if (element.webkitrequestfullscreen) &#123;</span><br><span class="line">       element.webkitrequestfullscreen();</span><br><span class="line">      &#125; else if (element.mozrequestfullscreen) &#123;</span><br><span class="line">       element.mozrequestfullscreen();</span><br><span class="line">      &#125; else if (element.msrequestfullscreen) &#123;</span><br><span class="line">       &#x2F;&#x2F; ie11</span><br><span class="line">       element.msrequestfullscreen();</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     this.fullscreen &#x3D; !this.fullscreen;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>7.向上指向的三角形箭头</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.arrow</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.arrow</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">border</span>: solid transparent;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom-color</span>: orange;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>8.输入的内容只能是数字，以数字开头，只有一个小数点，而且小数点后面只能有0到2位小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.investTableData[index].ykiTotal =</span><br><span class="line">       (<span class="string">&#x27;&#x27;</span> + value) <span class="comment">// 第一步：转成字符串</span></span><br><span class="line">         .replace(<span class="regexp">/[^\d\\.^]+/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 第二步：把不是数字，不是小数点的过滤掉</span></span><br><span class="line">         .replace(<span class="regexp">/^0+(\d)/</span>, <span class="string">&#x27;$1&#x27;</span>) <span class="comment">// 第三步：第一位0开头，0后面为数字，则过滤掉，取后面的数字</span></span><br><span class="line">         .replace(<span class="regexp">/^\./</span>, <span class="string">&#x27;0.&#x27;</span>) <span class="comment">// 第四步：如果输入的第一位为小数点，则替换成 0. 实现自动补全</span></span><br><span class="line">         .match(<span class="regexp">/^\d*(\.?\d&#123;0,4&#125;)/g</span>)[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span> <span class="comment">// 第五步：最终匹配得到结果 以数字开头，只有一个小数点，而且小数点后面只能有0到2位小数</span></span><br></pre></td></tr></table></figure><p>9.element-ui中tooltip的自定义样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tooltip</span><br><span class="line">   popper-class&#x3D;&quot;tooltipInfo&quot;</span><br><span class="line">   :content&#x3D;&quot;item.daInfo&quot;</span><br><span class="line">   placement&#x3D;&quot;bottom&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;el-tooltip&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;* app提示信息 *&#x2F;</span><br><span class="line">.tooltipInfo &#123;</span><br><span class="line">  width: 202px;</span><br><span class="line">  background: #fff !important;</span><br><span class="line">  box-shadow: 0px 0px 10px rgba(124, 124, 124, 0.2);</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  line-height: 24px;</span><br><span class="line">  color: #333 !important;</span><br><span class="line">&#125;</span><br><span class="line">.tooltipInfo.el-tooltip__popper[x-placement^&#x3D;&quot;bottom&quot;] .popper__arrow &#123;</span><br><span class="line">  border-bottom-color: #fff !important;</span><br><span class="line">&#125;</span><br><span class="line">.tooltipInfo.el-tooltip__popper[x-placement^&#x3D;&quot;bottom&quot;] .popper__arrow:after &#123;</span><br><span class="line">  border-bottom-color: #fff !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.vue中data为何要通过return返回，官网并非是一个函数?</p><p>将data封装成函数后，在实例化组件的时候，我们只是调用了data函数生成的数据副本，避免了数据污染。不使用return包裹的数据会在项目的全局可见，会造成变量污染。使用return包裹后数据中变量只在当前组件中生效，不会影响其他组件</p><p>11.滚动条隐藏，但可以滚动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;::-webkit-scrollbar&#123;  //某个div下的滚动条</span><br><span class="line">        <span class="selector-tag">width</span><span class="selector-pseudo">:0px</span>;</span><br><span class="line">        <span class="selector-tag">opacity</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">        <span class="selector-tag">-webkit-overflow-scrolling</span>: <span class="selector-tag">touch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.margin-top的50%是相对于父元素的宽度，不是高度，可以通过writing-mode:vertical-rl。改变方向，但会改变子元素中内容的方向</p><p>13.iview时间选择器在form表单中点击提交偶尔会出现icon转圈的情况，原因是因为校验的问题，解决的办法是自己用函数写校验规则</p><p>14.iview表格单机表格行，复选框选中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> selectThisRow(data,index)&#123;</span><br><span class="line">  this.$refs.selection.toggleSelect(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.修改滚动条样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">   <span class="comment">/*滚动条整体样式*/</span></span><br><span class="line">   <span class="attribute">width</span>: <span class="number">5px</span>; <span class="comment">/*高宽分别对应横竖滚动条的尺寸*/</span></span><br><span class="line">   <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">   <span class="comment">/*滚动条里面小方块*/</span></span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">   <span class="comment">/*滚动条里面轨道*/</span></span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>16.数据分屏显示时，可以先封装下面的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组拆分</span></span><br><span class="line"><span class="function"><span class="title">group</span>(<span class="params">array, subGroupLength</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> newArray = [];</span><br><span class="line">    <span class="keyword">while</span>(index &lt; array.length) &#123;</span><br><span class="line">        newArray.push(array.slice(index, index += subGroupLength));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17.vue引入vue-grid-layout报错：<code>You may need an appropriate loader to handle this file type</code></p><p>解决办法：在webpack.base.conf.js中配置js的地方添加resolve(‘node_modules/vue-grid-layout’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">       loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">       include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>), resolve(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>),resolve(<span class="string">&#x27;node_modules/vue-grid-layout&#x27;</span>)]</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>18.监听vuex里的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;$store.state.informationRecordFlag&#39;: function()&#123;</span><br><span class="line">      this.getMessage()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>19.li标签排列时出现空隙</p><p>原因：由于空格和回车键造成的。解决方案如下：<br>方案一：将每个li标签连起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方案二：给父元素设置font-size：0；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">“font-size：0”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>20.vue中本地图片的动态获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;..&#x2F;assets&#x2F;images&#x2F;icon&#x2F;shengchangongdan.png&quot;)</span><br></pre></td></tr></table></figure><p>21.npm install报错4048要清空缓存，因为要下载的依赖存在于缓存中，但是不够完整或者有效，所以导致了报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache verify</span><br></pre></td></tr></table></figure><p>22.git给分支添加注释并查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config branch.[branchName].description &#39;这是注释&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config branch.[branchName].description</span><br></pre></td></tr></table></figure><p>23.锚点跳转添加过渡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;index&#x27;</span>).scrollIntoView(&#123; <span class="attr">block</span>: <span class="string">&#x27;start&#x27;</span>, <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;); <span class="comment">//index是目标id</span></span><br></pre></td></tr></table></figure><p>24.vue顶部菜单栏当前路由，多次点击当前选中的，会报路由重复的错误，如下图：多次点击红色部分，会报控制台错误</p><img src="/2021/07/01/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20210416101853739.png" class="" title="这是一张图片"><p>解决办法：在router文件下的index.js加入以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//解决问题的代码</span></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>25.axios传参序列化的写法(安装qs)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;/dtsum/zongtong/basic/CommonController/editForm&quot;</span>,</span><br><span class="line">    method: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      router: <span class="built_in">this</span>.routerPath,</span><br><span class="line">      fieldIdList: <span class="built_in">this</span>.value</span><br><span class="line">    &#125;,</span><br><span class="line">    paramsSerializer: <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.qs.stringify(params, &#123; <span class="attr">indices</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>26.iview中表单验证时，select下拉框选择后还是报错，原因是：iview默认校验数据类型为String，而我的select用的value是number类型的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">formRules: &#123;</span><br><span class="line">    deviceType: [</span><br><span class="line">      &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        type: <span class="string">&quot;number&quot;</span>, <span class="comment">//改为number类型</span></span><br><span class="line">        trigger: <span class="string">&quot;change&quot;</span>,</span><br><span class="line">        message: <span class="string">&quot;此项必填！&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>27.post方法提交数据类型的几种方式</p><p>1.application/json：这是最常见的 json 格式，默认是这种格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;input1&quot;</span>:<span class="string">&quot;xxx&quot;</span>,<span class="attr">&quot;input2&quot;</span>:<span class="string">&quot;ooo&quot;</span>,<span class="attr">&quot;remember&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>2.application/x-www-form-urlencoded：浏览器的原生 form 表单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;/dtsum/zongtong/device/DeviceController/deleteDeviceFromGroup&quot;</span>,</span><br><span class="line">    method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: Qs.stringify(&#123;</span><br><span class="line">      deviceNumber: <span class="built_in">this</span>.deviceId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><img src="/2021/07/01/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20210701120014713-1625112016408.png" class="" title="这是一张图片"><p>提交的数据按照aaa=1&amp;WW=2编码?有疑问，为什么传的是formData</p><p>3.multipart/form-data：这一种是表单格式的，不对字符进行编码，使用二进制数据传输，一般用于上传文件，非文本的数据传输。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = <span class="keyword">new</span> FormData()</span><br><span class="line">params.append(<span class="string">&#x27;file&#x27;</span>, <span class="built_in">this</span>.file)</span><br><span class="line">params.append(<span class="string">&#x27;userName&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">params.append(<span class="string">&#x27;sex&#x27;</span>, <span class="built_in">this</span>.sex)</span><br></pre></td></tr></table></figure><p>4.text/xml:这种直接传的 xml 格式 </p><p>28.element-ui中得dialog会显示在蒙版得下面</p><p>原因：如果 <code>Dialog</code> 的外层布局的 <code>position</code> 值为 <code>fixed</code>, <code>absolute</code>, <code>relative</code> 三者之一时，就会出现被蒙板遮住的情况。</p><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog</span><br><span class="line">    :visible.sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">    top&#x3D;&quot;20vh&quot;</span><br><span class="line">    width&#x3D;&quot;30%&quot;</span><br><span class="line">    :append-to-body&#x3D;&quot;true&quot;&gt; &#x2F;&#x2F;官网提供了该属性</span><br><span class="line">&lt;&#x2F;el-dialog&gt;</span><br></pre></td></tr></table></figure><h2 id="关于表格的一些设置"><a href="#关于表格的一些设置" class="headerlink" title="关于表格的一些设置"></a>关于表格的一些设置</h2><p>1.表格边框合并：为表格元素设置border-collapse:collapse;</p><p>2.设置表格边框的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--group</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--group</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table</span> <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table</span> <span class="selector-tag">th</span><span class="selector-class">.is-leaf</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span> <span class="selector-tag">th</span><span class="selector-class">.gutter</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span> <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table--border</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.设置表格字体颜色和背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-wrapper</span> /<span class="selector-tag">deep</span>/ <span class="selector-class">.el-table</span>,</span><br><span class="line">   <span class="selector-class">.el-table__expanded-cell</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: transparent;</span><br><span class="line">     <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.table-wrapper</span> /<span class="selector-tag">deep</span>/ <span class="selector-class">.el-table</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">     <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.table-wrapper</span> /<span class="selector-tag">deep</span>/ <span class="selector-class">.el-table--enable-row-transition</span> <span class="selector-class">.el-table__body</span> <span class="selector-tag">td</span>,</span><br><span class="line">   <span class="selector-class">.el-table</span> <span class="selector-class">.cell</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: transparent;</span><br><span class="line">     <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4.解决表头与内容有边框错位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.table-wrapper</span> <span class="selector-class">.el-table</span> <span class="selector-tag">th</span><span class="selector-class">.gutter</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.修改el-table中的滚动条样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动条的宽度</span></span><br><span class="line">/deep/ .el-table__body-wrapper::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>; <span class="comment">// 横向滚动条</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6px</span>; <span class="comment">// 纵向滚动条 必写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动条的滑块</span></span><br><span class="line">/deep/ .el-table__body-wrapper::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.element-ui的表格表头固定，添加一个height:”250”属性即可</p><p>7.el-table设置表格溢出鼠标移入显示完全：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column prop&#x3D;&quot;ykcRemark&quot; label&#x3D;&quot;备注&quot; :show-overflow-tooltip&#x3D;&quot;true&quot;&gt; &lt;&#x2F;el-table-column&gt;</span><br><span class="line"> .el-table .cell &#123;</span><br><span class="line">        white-space: nowrap;   &#x2F;&#x2F;强制不换行</span><br><span class="line">        overflow: hidden; &#x2F;&#x2F;溢出隐藏</span><br><span class="line">        text-overflow: ellipsis  &#x2F;&#x2F;替换为省略号</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>8.iview表格中添加radio单选按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          title: <span class="string">&quot;启用&quot;</span>,</span><br><span class="line">          key: <span class="string">&quot;enable&quot;</span>,</span><br><span class="line">          tooltip: <span class="literal">true</span>,</span><br><span class="line">          render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> id = params.row.id;</span><br><span class="line">            <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.currentid === id) &#123;</span><br><span class="line">              flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">return</span> h(<span class="string">&quot;div&quot;</span>, [</span><br><span class="line">              h(<span class="string">&quot;Radio&quot;</span>, &#123;</span><br><span class="line">                props: &#123;</span><br><span class="line">                  value: flag</span><br><span class="line">                &#125;,</span><br><span class="line">                style: &#123;</span><br><span class="line">                  padding: <span class="string">&quot;0 8px&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line">                  <span class="string">&quot;on-change&quot;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    self.currentid = id;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            ]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>实现的效果：</p><img src="/2021/07/01/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20210324172540531.png" class="" title="这是一张图片">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小问题&quot;&gt;&lt;a href=&quot;#小问题&quot; class=&quot;headerlink&quot; title=&quot;小问题&quot;&gt;&lt;/a&gt;小问题&lt;/h2&gt;&lt;p&gt;1.前端接受不到后端传来的sessionID的cookie值，可能是跨域问题，一般可以选择用代理proxy解决。&lt;/p&gt;
&lt;p&gt;2.</summary>
      
    
    
    
    <category term="日常随笔" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>创建vue项目</title>
    <link href="http://example.com/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-12T16:00:00.000Z</published>
    <updated>2022-10-13T03:18:01.332Z</updated>
    
    <content type="html"><![CDATA[<p>使用脚手架3.0创建Vue2.0项目</p><p>到指定文件目录下，打开cmd控制台，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create aoyafont-padnew  &#x2F;&#x2F;aoyafont-padnew为项目名</span><br></pre></td></tr></table></figure><p>依次选择：</p><p>手动选择配置</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313152002001.png" class="" title="这是一张图片"><p>一般会选择以下几项，需要vuex可选择vuex，CSS那项是预处理器，</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313164346678.png" class="" title="这是一张图片"><p>安装node-sass</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313164436483.png" class="" title="这是一张图片"><p>代码规范，一般选择这一项，实际开发中会使用prettier</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313153101097.png" class="" title="这是一张图片"><p>选择保存就检测代码</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313153223584.png" class="" title="这是一张图片"><p>选择独立存放配置文件</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313153338902.png" class="" title="这是一张图片"><p>要记录本次的配置吗，记录的话要起一个名字</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313153448473.png" class="" title="这是一张图片"><p>新建后的文件目录</p><img src="/2021/03/13/vue%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/image-20210313153645509.png" class="" title="这是一张图片">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用脚手架3.0创建Vue2.0项目&lt;/p&gt;
&lt;p&gt;到指定文件目录下，打开cmd控制台，输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>顶部导航标签</title>
    <link href="http://example.com/2021/03/01/%E5%AF%BC%E8%88%AA%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2021/03/01/%E5%AF%BC%E8%88%AA%E6%A0%87%E7%AD%BE/</id>
    <published>2021-02-28T16:00:00.000Z</published>
    <updated>2022-10-13T03:17:39.693Z</updated>
    
    <content type="html"><![CDATA[<p>澳亚MES管理系统中导航标签的实现，根据element-ui中的tabs标签页所实现</p><img src="/2021/03/01/%E5%AF%BC%E8%88%AA%E6%A0%87%E7%AD%BE/image-20210301140603490.png" class="" title="这是一张图片"><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>1.点击左侧菜单导航会增加一个新的标签，相对应路由会跟着跳转</p><p>2.删除一个标签，当前路由会跳转到删除标签前一个标签的路由</p><p>3.如果是之前打开的标签，（1）点击左侧标红的菜单，路由跳转，标签也要被选中 （2）选中导航标签中的标签，路由跳转，标签也要被选</p><p>4.‘首页’标签没有删除按钮</p><p>5.页面刷新之后导航还是原来的样子</p><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><p>本来想要实现类似于百度一样的导航标签，但考虑太过复杂，便选择使用element-ui，还选择了vuex.</p><p><strong>commit 和dispatch的区别在于commit是提交mutatious的同步操作，dispatch是分发actions的异步操作，例如向后端提交数据</strong></p><p>1.Action提交的是mutation，而不是直接变更状态，可以包含任意的异步操作。<br>2.dispatch推送一个action。</p><p>1.vuex文件store下的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  visitedViews: []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  SETVIEWS: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    state.visitedViews = view;</span><br><span class="line">  &#125;,</span><br><span class="line">  ADD_VISITED_VIEW: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.visitedViews.some(<span class="function">(<span class="params">v</span>) =&gt;</span> v.path === view.path)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (view.meta.title.length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      view.meta.title = view.meta.title.slice(<span class="number">0</span>, <span class="number">4</span>) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    state.visitedViews.push(</span><br><span class="line">      <span class="built_in">Object</span>.assign(&#123;&#125;, view, &#123;</span><br><span class="line">        title: view.meta.title || <span class="string">&quot;no-name&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  DEL_VISITED_VIEW: <span class="function">(<span class="params">state, view</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [i, v] <span class="keyword">of</span> state.visitedViews.entries()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v.path === view.path) &#123;</span><br><span class="line">        state.visitedViews.splice(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  DEL_ALL_VISITED_VIEWS: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> affixTags = state.visitedViews.filter(<span class="function">(<span class="params">tag</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (tag.meta !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tag.meta.affix;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    state.visitedViews = affixTags;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 异步写法，返回promise对象</span></span><br><span class="line">  <span class="function"><span class="title">setView</span>(<span class="params">&#123; commit &#125;, view</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;SETVIEWS&quot;</span>, view);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">addView</span>(<span class="params">&#123; commit &#125;, view</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;ADD_VISITED_VIEW&quot;</span>, view);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delView</span>(<span class="params">&#123; dispatch, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      dispatch(<span class="string">&quot;delVisitedView&quot;</span>, view);</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        visitedViews: [...state.visitedViews]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delVisitedView</span>(<span class="params">&#123; commit, state &#125;, view</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;DEL_VISITED_VIEW&quot;</span>, view);</span><br><span class="line">      resolve([...state.visitedViews]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">delAllVisitedViews</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;DEL_ALL_VISITED_VIEWS&quot;</span>);</span><br><span class="line">      resolve([...state.visitedViews]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在组件topheader.vue中实现导航标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;topHeader&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title_container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title_content&quot;</span>&gt;</span> 织造数字车间管控系统<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;headerNavContainer&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-tabs</span><br><span class="line">        v-model=&quot;tagName&quot;</span><br><span class="line">        type=&quot;card&quot;</span><br><span class="line">        @tab-remove=&quot;removeTab&quot;</span><br><span class="line">        @tab-click=&quot;cliclTab&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-tab-pane</span><br><span class="line">          v-for=&quot;tag in visitedViews&quot;</span><br><span class="line">          :key=&quot;tag.path&quot;</span><br><span class="line">          :label=&quot;tag.title&quot;</span><br><span class="line">          :name=&quot;tag.name&quot;</span><br><span class="line">          closable</span><br><span class="line">        &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-tab-pane</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      tagName: <span class="string">&quot;index&quot;</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">visitedViews</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.visitedViews;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">routes</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.permission.routes;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route(val) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.addTags();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tagName = val.name;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.addTags();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tagName = <span class="built_in">this</span>.visitedViews.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> item.path === <span class="built_in">this</span>.$route.path;</span></span><br><span class="line">    &#125;)[0].name;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">removeTab</span>(<span class="params">targetName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tabs = <span class="built_in">this</span>.visitedViews;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> activeName = <span class="built_in">this</span>.tagName;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> delViewTab = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">      tabs.forEach(<span class="function">(<span class="params">tab, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (tab.name === targetName) &#123;</span></span><br><span class="line">          delViewTab = tab;</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> nextTab = tabs[index + <span class="number">1</span>] || tabs[index - <span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (nextTab) &#123;</span></span><br><span class="line">            activeName = nextTab.name;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tagName = activeName;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.closeSelectedTag(delViewTab);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">cliclTab</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="javascript">        path: <span class="built_in">this</span>.visitedViews[e.index].path,</span></span><br><span class="line"><span class="javascript">        query: <span class="built_in">this</span>.visitedViews[e.index].query</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">addTags</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; name &#125; = <span class="built_in">this</span>.$route;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (name) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;addView&quot;</span>, <span class="built_in">this</span>.$route);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> length = <span class="built_in">this</span>.visitedViews.length - <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tagName = <span class="built_in">this</span>.visitedViews[length].name;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">closeSelectedTag</span>(<span class="params">view</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;delView&quot;</span>, view).then(<span class="function">(<span class="params">&#123; visitedViews &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.isActive(view)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.toLastView(visitedViews, view);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">isActive</span>(<span class="params">route</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> route.path === <span class="built_in">this</span>.$route.path;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">toLastView</span>(<span class="params">visitedViews, view</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> latestView = visitedViews.slice(-<span class="number">1</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (latestView) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.push(latestView);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (view.name === <span class="string">&quot;Dashboard&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$router.replace(&#123; <span class="attr">path</span>: <span class="string">&quot;/redirect&quot;</span> + view.fullPath &#125;);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$router.push(<span class="string">&quot;/&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#topHeader</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#0d47a1</span>;</span></span><br><span class="line">  height: 46px;</span><br><span class="line">  width: 100%;</span><br><span class="line"><span class="css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    line-height: 46px;</span><br><span class="line">    text-align: center;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.title_container</span> &#123;</span></span><br><span class="line">      height: 27px;</span><br><span class="line">      span &#123;</span><br><span class="line">        line-height: 27px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        font-family: SourceHanSansCN-Bold, SourceHanSansCN;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        color: rgba(255, 255, 255, 0.9);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.headerNavContainer</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    width: calc(100% - 240px);</span><br><span class="line">    display: inline-block;</span><br><span class="line"><span class="css">    <span class="selector-class">.tags-view-wrapper</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 52px;</span><br><span class="line"><span class="css">      <span class="selector-class">.tags-view-item</span> &#123;</span></span><br><span class="line">        width: 1rem;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 顶部标签栏的样式</span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs--card</span> &gt; <span class="selector-class">.el-tabs__header</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs--card</span> &gt; <span class="selector-class">.el-tabs__header</span> <span class="selector-class">.el-tabs__nav</span> &#123;</span></span><br><span class="line">      border: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs__item</span> &#123;</span></span><br><span class="line">      height: 47px;</span><br><span class="line">      line-height: 47px;</span><br><span class="line">      font-size: 16px;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs--card</span> &gt; <span class="selector-class">.el-tabs__header</span> <span class="selector-class">.el-tabs__item</span> &#123;</span></span><br><span class="line">      border: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs--card</span> &gt; <span class="selector-class">.el-tabs__header</span> <span class="selector-class">.el-tabs__item</span><span class="selector-class">.is-active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.el-tabs__nav</span> <span class="selector-class">.el-tabs__item</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.el-tabs__content</span> &#123;</span></span><br><span class="line">    // display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.页面刷新保存vuex中的数据，就是会导致页面刷新缓慢，添加在vue中app.vue的created()中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> seen = [];</span><br><span class="line"><span class="keyword">var</span> replacer = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (seen.indexOf(value) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seen.push(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  sessionStorage.setItem(</span><br><span class="line">    <span class="string">&quot;store&quot;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.$store.state, replacer)</span><br><span class="line">  );</span><br><span class="line">&#125;); <span class="comment">// 在页面加载时读取sessionStorage里的状态信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sessionStorage.getItem(<span class="string">&quot;store&quot;</span>)) &#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.replaceState(</span><br><span class="line">    <span class="built_in">Object</span>.assign(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      <span class="built_in">this</span>.$store.state,</span><br><span class="line">      <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&quot;store&quot;</span>))</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;澳亚MES管理系统中导航标签的实现，根据element-ui中的tabs标签页所实现&lt;/p&gt;
&lt;img src=&quot;/2021/03/01/%E5%AF%BC%E8%88%AA%E6%A0%87%E7%AD%BE/image-20210301140603490.png&quot; cl</summary>
      
    
    
    
    <category term="demo" scheme="http://example.com/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>json-serve的使用</title>
    <link href="http://example.com/2021/02/24/json-serve%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/02/24/json-serve%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-24T14:44:44.000Z</published>
    <updated>2022-10-13T03:19:13.603Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、安装json-serve</strong></p><p>1.npm install -g json-server</p><p>如果报错：<a href="https://www.cnblogs.com/xscn1230/p/nuonuo1230.html">Hostname/IP does not match certificate’s altnames: Host: registry.cnpmjs.org. is not in the cert’s altnames: DNS:r.cnpmjs.org</a></p><p>解决办法：<strong>npm set strict-ssl false</strong></p><p>2.json-server -v</p><p>3.新建文件夹/serve/data.json,在data.json中添加json数据<strong>，如下：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;    </span><br><span class="line">        <span class="attr">&quot;success&quot;</span>: <span class="number">1</span>,   </span><br><span class="line">        <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功！&quot;</span>,    </span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: &#123;      </span><br><span class="line">            <span class="attr">&quot;deviceStateList&quot;</span>: [  </span><br><span class="line">                [        </span><br><span class="line">                    &#123;      </span><br><span class="line">                        <span class="attr">&quot;statusTime&quot;</span>: <span class="string">&quot;2020-8-21 12:58:35&quot;</span>,      </span><br><span class="line">                        <span class="attr">&quot;duration&quot;</span>: <span class="string">&quot;&quot;</span>,        </span><br><span class="line">                        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,          </span><br><span class="line">                        <span class="attr">&quot;statusName&quot;</span>: <span class="string">&quot;运行&quot;</span>       </span><br><span class="line">                    &#125;,        </span><br><span class="line">                    &#123;         </span><br><span class="line">                        <span class="attr">&quot;statusTime&quot;</span>: <span class="string">&quot;2020-8-21 12:58:35&quot;</span>,          </span><br><span class="line">                        <span class="attr">&quot;duration&quot;</span>: <span class="string">&quot;&quot;</span>,          </span><br><span class="line">                        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;2&quot;</span>,        </span><br><span class="line">                        <span class="attr">&quot;statusName&quot;</span>: <span class="string">&quot;故障停机&quot;</span>  </span><br><span class="line">                    &#125;      </span><br><span class="line">                ],  </span><br><span class="line">                [     </span><br><span class="line">                    &#123;     </span><br><span class="line">                        <span class="attr">&quot;statusTime&quot;</span>: <span class="string">&quot;2020-8-21 12:58:35&quot;</span>,   </span><br><span class="line">                        <span class="attr">&quot;duration&quot;</span>: <span class="string">&quot;&quot;</span>,          </span><br><span class="line">                        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,       </span><br><span class="line">                        <span class="attr">&quot;statusName&quot;</span>: <span class="string">&quot;运行&quot;</span> </span><br><span class="line">                    &#125;,      </span><br><span class="line">                    &#123;        </span><br><span class="line">                        <span class="attr">&quot;statusTime&quot;</span>: <span class="string">&quot;2020-8-21 12:58:35&quot;</span>,        </span><br><span class="line">                        <span class="attr">&quot;duration&quot;</span>: <span class="string">&quot;&quot;</span>,      </span><br><span class="line">                        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;2&quot;</span>,         </span><br><span class="line">                        <span class="attr">&quot;statusName&quot;</span>: <span class="string">&quot;故障停机&quot;</span>      </span><br><span class="line">                    &#125;       </span><br><span class="line">                ]     </span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.运行（cmd）</p><p>﻿json-server data.json</p><p><strong>Tips</strong>:json-server –watch data.json   实时监听data.json的变化</p><p><strong>二、在vue中使用json-server</strong></p><p>1.根目录下创建data.json</p><p>2.在package.json中的scripts中配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;json&quot;: &quot;json-server data.json --port 3003&quot;</span><br></pre></td></tr></table></figure><p>﻿3.npm run json运行</p><p>4.访问<a href="http://localhost:3003/data">http://localhost:3003/data</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一、安装json-serve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.npm install -g json-server&lt;/p&gt;
&lt;p&gt;如果报错：&lt;a href=&quot;https://www.cnblogs.com/xscn1230/p/nuonuo1230.ht</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序打印</title>
    <link href="http://example.com/2021/02/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8D%B0/"/>
    <id>http://example.com/2021/02/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8D%B0/</id>
    <published>2021-02-24T13:29:19.000Z</published>
    <updated>2022-10-11T03:20:57.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小程序打印的示例"><a href="#小程序打印的示例" class="headerlink" title="小程序打印的示例"></a>小程序打印的示例</h3><p>需求是小程序通过蓝牙连接打印所需要的的东西，具体实现主要包括两步：</p><p>1.蓝牙连接</p><p>2.打印内容</p><p>具体实现方法如下：</p><p>1.蓝牙连接：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/pack/bleConnect/bleConnect.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&#x27;button&#x27;</span>  <span class="attr">hover-class</span>=<span class="string">&quot;hover&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;startSearch&quot;</span> <span class="attr">loading</span>=<span class="string">&#x27;&#123;&#123;isScanning&#125;&#125;&#x27;</span>&gt;</span> 搜索蓝牙设备 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;.td&quot;</span>&gt;</span>（Android8.0+系统需开启定位）<span class="tag">&lt;/<span class="name">text</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;device_list&quot;</span> <span class="attr">scroll-y</span> <span class="attr">scroll-with-animation</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">data-title</span>=<span class="string">&quot;&#123;&#123;item.deviceId&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">data-name</span>=<span class="string">&quot;&#123;&#123;item.name&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">data-advertisData</span>=<span class="string">&quot;&#123;&#123;item.advertisServiceUUIDs&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">wx:key</span>=<span class="string">&quot;deviceId&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">bindtap</span>=<span class="string">&quot;bindViewTap&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;item_hover&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 16px; color: #333;&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 16px; color: #333;&quot;</span> &gt;</span>&#123;&#123;item.deviceId&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 10px&quot;</span>&gt;</span>信号强度: &#123;&#123;item.RSSI&#125;&#125;dBm (&#123;&#123;utils.max(0, item.RSSI + 100)&#125;&#125;%)<span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pages/pack/bleConnect/bleConnect.wxss */</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#54bec2</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">98</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: bg_red;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 按下变颜色 */</span></span><br><span class="line"><span class="selector-class">.hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:  <span class="number">#DCDCDC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.device_list</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.td</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#EEE</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item_hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;<span class="comment">/* pages/bleConnect/bleConnect.wxss */</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/pack/bleConnect/bleConnect.js</span></span><br><span class="line"><span class="keyword">var</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    services: [],</span><br><span class="line">    serviceId: <span class="number">0</span>,</span><br><span class="line">    writeCharacter: <span class="literal">false</span>,</span><br><span class="line">    readCharacter: <span class="literal">false</span>,</span><br><span class="line">    notifyCharacter: <span class="literal">false</span>,</span><br><span class="line">    isScanning:<span class="literal">false</span>,</span><br><span class="line">    aypiId:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//搜索设备</span></span><br><span class="line">  startSearch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    wx.openBluetoothAdapter(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        wx.getBluetoothAdapterState(&#123;</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;openBluetoothAdapter success&#x27;</span>, res)</span><br><span class="line">            <span class="keyword">if</span> (res.available) &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.discovering) &#123;</span><br><span class="line">                wx.stopBluetoothDevicesDiscovery(&#123;</span><br><span class="line">                  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// that.startBluetoothDevicesDiscovery()</span></span><br><span class="line">                that.getBluetoothDevices()</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// that.checkPemission()</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              wx.showModal(&#123;</span><br><span class="line">                title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">                content: <span class="string">&#x27;本机蓝牙不可用&#x27;</span>,</span><br><span class="line">                showCancel: <span class="literal">false</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">          content: <span class="string">&#x27;蓝牙初始化失败，请到设置打开蓝牙&#x27;</span>,</span><br><span class="line">          showCancel: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  checkPemission: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//android 6.0以上需授权地理位置权限</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> platform = app.BLEInformation.platform</span><br><span class="line">    <span class="keyword">if</span> (platform == <span class="string">&quot;ios&quot;</span>) &#123;</span><br><span class="line">      app.globalData.platform = <span class="string">&quot;ios&quot;</span></span><br><span class="line">      that.getBluetoothDevices()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (platform == <span class="string">&quot;android&quot;</span>) &#123;</span><br><span class="line">      app.globalData.platform = <span class="string">&quot;android&quot;</span></span><br><span class="line">      <span class="built_in">console</span>.log(app.getSystem().substring(app.getSystem().length - (app.getSystem().length - <span class="number">8</span>), app.getSystem().length - (app.getSystem().length - <span class="number">8</span>) + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">if</span> (app.getSystem().substring(app.getSystem().length - (app.getSystem().length - <span class="number">8</span>), app.getSystem().length - (app.getSystem().length - <span class="number">8</span>) + <span class="number">1</span>) &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        wx.getSetting(&#123;</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res)</span><br><span class="line">            <span class="keyword">if</span> (!res.authSetting[<span class="string">&#x27;scope.userLocation&#x27;</span>]) &#123;</span><br><span class="line">              wx.authorize(&#123;</span><br><span class="line">                scope: <span class="string">&#x27;scope.userLocation&#x27;</span>,</span><br><span class="line">                complete: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                  that.getBluetoothDevices()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              that.getBluetoothDevices()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getBluetoothDevices: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//获取蓝牙设备信息</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start search&quot;</span>)</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">&#x27;正在加载&#x27;</span>,</span><br><span class="line">      icon: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      isScanning:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    wx.startBluetoothDevicesDiscovery(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          wx.getBluetoothDevices(&#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> devices = []</span><br><span class="line">              <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.devices.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.devices[i].name != <span class="string">&quot;未知设备&quot;</span>) &#123;</span><br><span class="line">                  devices[num] = res.devices[i]</span><br><span class="line">                  num++</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                list: devices,</span><br><span class="line">                isScanning:<span class="literal">false</span></span><br><span class="line">              &#125;)</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">              wx.stopPullDownRefresh()</span><br><span class="line">              wx.stopBluetoothDevicesDiscovery(&#123;</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&quot;停止搜索蓝牙&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, <span class="number">5000</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  bindViewTap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    wx.stopBluetoothDevicesDiscovery(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(res) &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      serviceId: <span class="number">0</span>,</span><br><span class="line">      writeCharacter: <span class="literal">false</span>,</span><br><span class="line">      readCharacter: <span class="literal">false</span>,</span><br><span class="line">      notifyCharacter: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(e.currentTarget.dataset.title)</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">&#x27;正在连接&#x27;</span>,</span><br><span class="line">      </span><br><span class="line">    &#125;)</span><br><span class="line">    wx.createBLEConnection(&#123;</span><br><span class="line">      deviceId: e.currentTarget.dataset.title,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        app.BLEInformation.deviceId = e.currentTarget.dataset.title</span><br><span class="line">        that.getSeviceId()</span><br><span class="line">      &#125;, <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">          title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">          content: <span class="string">&#x27;连接失败&#x27;</span>,</span><br><span class="line">          showCancel: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">        wx.hideLoading()</span><br><span class="line">      &#125;, <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getSeviceId: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> platform = app.BLEInformation.platform</span><br><span class="line">    <span class="built_in">console</span>.log(app.BLEInformation.deviceId)</span><br><span class="line">    wx.getBLEDeviceServices(&#123;</span><br><span class="line">      deviceId: app.BLEInformation.deviceId,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          services: res.services</span><br><span class="line">        &#125;)</span><br><span class="line">        that.getCharacteristics()</span><br><span class="line">      &#125;, <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">      &#125;, <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getCharacteristics: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> list = that.data.services</span><br><span class="line">    <span class="keyword">var</span> num = that.data.serviceId</span><br><span class="line">    <span class="keyword">var</span> write = that.data.writeCharacter</span><br><span class="line">    <span class="keyword">var</span> read = that.data.readCharacter</span><br><span class="line">    <span class="keyword">var</span> notify = that.data.notifyCharacter</span><br><span class="line">    wx.getBLEDeviceCharacteristics(&#123;</span><br><span class="line">      deviceId: app.BLEInformation.deviceId,</span><br><span class="line">      serviceId: list[num].uuid,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.characteristics.length; ++i) &#123;</span><br><span class="line">          <span class="keyword">var</span> properties = res.characteristics[i].properties</span><br><span class="line">          <span class="keyword">var</span> item = res.characteristics[i].uuid</span><br><span class="line">          <span class="keyword">if</span> (!notify) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.notify) &#123;</span><br><span class="line">              app.BLEInformation.notifyCharaterId = item</span><br><span class="line">              app.BLEInformation.notifyServiceId = list[num].uuid</span><br><span class="line">              notify = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!write) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.write) &#123;</span><br><span class="line">              app.BLEInformation.writeCharaterId = item</span><br><span class="line">              app.BLEInformation.writeServiceId = list[num].uuid</span><br><span class="line">              write = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!read) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.read) &#123;</span><br><span class="line">              app.BLEInformation.readCharaterId = item</span><br><span class="line">              app.BLEInformation.readServiceId = list[num].uuid</span><br><span class="line">              read = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!write || !notify || !read) &#123;</span><br><span class="line">          num++</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            writeCharacter: write,</span><br><span class="line">            readCharacter: read,</span><br><span class="line">            notifyCharacter: notify,</span><br><span class="line">            serviceId: num</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">if</span> (num == list.length) &#123;</span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">              title: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">              content: <span class="string">&#x27;找不到该读写的特征值&#x27;</span>,</span><br><span class="line">              showCancel: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            that.getCharacteristics()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            title: <span class="string">&#x27;连接成功&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          that.openControl()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">      &#125;, <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;write:&quot;</span> + app.BLEInformation.writeCharaterId)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;read:&quot;</span> + app.BLEInformation.readCharaterId)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;notify:&quot;</span> + app.BLEInformation.notifyCharaterId)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">   openControl: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//连接成功返回主页</span></span><br><span class="line">    <span class="keyword">const</span> that=<span class="built_in">this</span></span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/pages/pack/previewPrint/previewPrint?aypId=&#x27;</span>+that.data.aypiId,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that=<span class="built_in">this</span></span><br><span class="line">    that.setData(&#123;<span class="attr">aypiId</span>:options.aypiId&#125;)</span><br><span class="line">    app.BLEInformation.platform = app.getPlatform()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.打印（蓝牙连接成功后跳转到打印页面）</p><p>该打印功能直接写在js代码中，无预览功能，只能通过精确计算得出具体的位置，所以预览功能要单独再页面中写出来，项目打印中有条形码，条形码是在一个canvans画板中画出来的，所以当打印的东西也写在画板中时（原来的思路），就会有两个画板，这样二者无法融合，所以通过另外一种方法实现。打印需求是可以自己选择要打印的内容，可以通过勾选框实现，然后遍历checked是true的几项，就是勾选的要打印的。</p><p>注意：该项目有用到两个相关的文件util和tsc，tsc中提供了打印内容调用的方法，util主要是barCode的使用，两个文件可以在以下地址查看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/pack/previewPrint/previewPrint.js</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;../../../utils/util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"><span class="keyword">const</span> tsc = <span class="built_in">require</span>(<span class="string">&#x27;../../../utils/tsc.js&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;../../../utils/moment.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    blueToothConnect: <span class="literal">false</span>, <span class="comment">//蓝牙连接是否可用</span></span><br><span class="line">    aypId: <span class="number">1</span>,<span class="comment">//包装表ID</span></span><br><span class="line">    list: [],</span><br><span class="line">    printDate: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    allChecked:<span class="literal">true</span>,</span><br><span class="line">    canvasWidth: <span class="number">347</span>,</span><br><span class="line">    canvasHeight: <span class="number">326</span>,</span><br><span class="line">    oneTimeData: <span class="number">120</span>,</span><br><span class="line">    currentTime: <span class="number">1</span>,</span><br><span class="line">    looptime: <span class="number">0</span>,</span><br><span class="line">    currentPrint: <span class="number">1</span>,</span><br><span class="line">    lastData: <span class="number">0</span>,</span><br><span class="line">    printerNum: <span class="number">1</span>,</span><br><span class="line">    BLEInformation: app.BLEInformation</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//code转化为条形码</span></span><br><span class="line">  <span class="function"><span class="title">handleCreateBarCode</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.list.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.data.list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        util.barcode(item.barCode, item.barCode, <span class="number">622</span>, <span class="number">180</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//动态获取要打印的数据内容</span></span><br><span class="line">  <span class="function"><span class="title">getList</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: getApp().baseUrl + <span class="string">&#x27;/iext/back/applets/PackageController/searchPackageInfo&#x27;</span>,</span><br><span class="line">      method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      header: &#123;</span><br><span class="line">        Cookie: wx.getStorageSync(<span class="string">&#x27;sessionid&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        aypId: that.data.aypId</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.data.success === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> date = moment(<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">&#x27;YYYY-MM-DD  HH:mm&#x27;</span>)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.data.body.weightList.length; i++) &#123;</span><br><span class="line">            res.data.body.weightList[i].checked = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            list: res.data.body.weightList,</span><br><span class="line">            printDate: date</span><br><span class="line">          &#125;)</span><br><span class="line">          callback()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data.msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">fail</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data.msg)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 勾选复选框</span></span><br><span class="line">  <span class="function"><span class="title">onChangeCheck</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> newList = that.data.list</span><br><span class="line">    newList[e.currentTarget.dataset.index].checked = !newList[e.currentTarget.dataset.index].checked</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      list: newList</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; that.data.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(that.data.list[i].checked===<span class="literal">false</span>)&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          allChecked: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result=that.data.list.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.checked===<span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span>(result.length===<span class="number">0</span>)&#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          allChecked: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 全选复选框</span></span><br><span class="line">  <span class="function"><span class="title">onChangeAllCheck</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that=<span class="built_in">this</span></span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      allChecked:!that.data.allChecked</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(that.data.allChecked)&#123;</span><br><span class="line">      <span class="keyword">const</span> newList=that.data.list</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newList.length; i++) &#123;</span><br><span class="line">        newList[i].checked=<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        list:newList</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> newList=that.data.list</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newList.length; i++) &#123;</span><br><span class="line">        newList[i].checked=<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        list:newList</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//页面中点击打印调用此方法</span></span><br><span class="line">  printPhoto: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//打印bitmap，图片内容不建议太大，小程序限制传输的字节数为20byte</span></span><br><span class="line">   <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//查看蓝牙连接是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (that.data.blueToothConnect === <span class="literal">false</span>) &#123;</span><br><span class="line">      wx.navigateTo(&#123;</span><br><span class="line">        url: <span class="string">&#x27;../bleConnect/bleConnect?aypiId=&#x27;</span> + that.data.list[<span class="number">0</span>].aypiId</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; that.data.list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> list = that.data.list[i]</span><br><span class="line">        <span class="keyword">if</span> (list.checked === <span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            that.realPrint(list)</span><br><span class="line">          &#125;, <span class="number">5000</span> * i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//构建打印的内容和样式</span></span><br><span class="line">  realPrint:<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that=<span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> command = tsc.jpPrinter.createNew()</span><br><span class="line">    command.setCls()<span class="comment">//清除缓冲区，防止下一个没生效</span></span><br><span class="line">    command.setSize(<span class="number">70</span>, <span class="number">60</span>)<span class="comment">//设置标签大小，单位mm.具体参数请用尺子量一下</span></span><br><span class="line">    command.setGap(<span class="number">0</span>)<span class="comment">//设置两个标签之间的间隙，单位mm.具体参数请用尺子量一下</span></span><br><span class="line">    command.setCls()<span class="comment">//清除缓冲区</span></span><br><span class="line">    command.setBar(<span class="number">10</span>, <span class="number">75</span>, <span class="number">500</span>, <span class="number">3</span>);<span class="comment">//绘制一条黑线</span></span><br><span class="line">    command.setText(<span class="number">105</span>, <span class="number">20</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;包装流转信息卡&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line"></span><br><span class="line">    command.setText(<span class="number">30</span>, <span class="number">100</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;订单单号：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">140</span>, <span class="number">100</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.orderNumber)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">340</span>, <span class="number">100</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;箱    号：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">450</span>, <span class="number">100</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.aypAyciNum)<span class="comment">//绘制文字</span></span><br><span class="line"></span><br><span class="line">    command.setText(<span class="number">30</span>, <span class="number">150</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;工单单号：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">140</span>, <span class="number">150</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.workOrderNumber)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">340</span>, <span class="number">150</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;机 台 号：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">450</span>, <span class="number">150</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.deviceNumber)<span class="comment">//绘制文字</span></span><br><span class="line"></span><br><span class="line">    command.setText(<span class="number">30</span>, <span class="number">200</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;规    格：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    <span class="keyword">const</span> str = list.standards</span><br><span class="line">    <span class="keyword">if</span> (str.length &gt; <span class="number">25</span>) &#123;</span><br><span class="line">      command.setText(<span class="number">140</span>, <span class="number">200</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, str.slice(<span class="number">0</span>, <span class="number">26</span>))<span class="comment">//绘制文字</span></span><br><span class="line">      command.setText(<span class="number">140</span>, <span class="number">240</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, str.slice(<span class="number">26</span>, str.length))<span class="comment">//绘制文字</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      command.setText(<span class="number">140</span>, <span class="number">200</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, str)<span class="comment">//绘制文字</span></span><br><span class="line">    &#125;</span><br><span class="line">    command.setText(<span class="number">30</span>, <span class="number">280</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;净    重：&quot;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">140</span>, <span class="number">280</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.netWeight + <span class="string">&#x27;kg&#x27;</span>)<span class="comment">//绘制文字</span></span><br><span class="line">    command.setText(<span class="number">300</span>, <span class="number">280</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, that.data.printDate)<span class="comment">//绘制文字</span></span><br><span class="line"></span><br><span class="line">    command.setBarCode(<span class="number">30</span>, <span class="number">330</span>, <span class="string">&quot;128&quot;</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, list.barCode)<span class="comment">//绘制code128条码</span></span><br><span class="line">    command.setText(<span class="number">150</span>, <span class="number">440</span>, <span class="string">&quot;TSS24.BF2&quot;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, list.barCode)<span class="comment">//绘制文字</span></span><br><span class="line"></span><br><span class="line">    command.setPagePrint()<span class="comment">//执行打印指令</span></span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      isLabelSend: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    that.prepareSend(command.getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  prepareSend: <span class="function"><span class="keyword">function</span> (<span class="params">buff</span>) </span>&#123; <span class="comment">//准备发送，根据每次发送字节数来处理分包数量</span></span><br><span class="line">    <span class="comment">//console.log(buff)</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> time = that.data.oneTimeData</span><br><span class="line">    <span class="keyword">var</span> looptime = <span class="built_in">parseInt</span>(buff.length / time);</span><br><span class="line">    <span class="keyword">var</span> lastData = <span class="built_in">parseInt</span>(buff.length % time);</span><br><span class="line">    <span class="comment">//console.log(looptime + &quot;---&quot; + lastData)</span></span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      looptime: looptime + <span class="number">1</span>,</span><br><span class="line">      lastData: lastData,</span><br><span class="line">      currentTime: <span class="number">1</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(buff)</span><br><span class="line">    that.Send(buff)</span><br><span class="line">  &#125;,</span><br><span class="line">  Send: <span class="function"><span class="keyword">function</span> (<span class="params">buff</span>) </span>&#123; <span class="comment">//分包发送</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> currentTime = that.data.currentTime</span><br><span class="line">    <span class="keyword">var</span> loopTime = that.data.looptime</span><br><span class="line">    <span class="keyword">var</span> lastData = that.data.lastData</span><br><span class="line">    <span class="keyword">var</span> onTimeData = that.data.oneTimeData</span><br><span class="line">    <span class="keyword">var</span> printNum = that.data.printerNum</span><br><span class="line">    <span class="keyword">var</span> currentPrint = that.data.currentPrint</span><br><span class="line">    <span class="keyword">var</span> buf</span><br><span class="line">    <span class="keyword">var</span> dataView</span><br><span class="line">    <span class="keyword">if</span> (currentTime &lt; loopTime) &#123;</span><br><span class="line">      buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(onTimeData)</span><br><span class="line">      dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; onTimeData; ++i) &#123;</span><br><span class="line">        dataView.setUint8(i, buff[(currentTime - <span class="number">1</span>) * onTimeData + i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(lastData)</span><br><span class="line">      dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lastData; ++i) &#123;</span><br><span class="line">        dataView.setUint8(i, buff[(currentTime - <span class="number">1</span>) * onTimeData + i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(&quot;第&quot; + currentTime + &quot;次发送数据大小为：&quot; + buf.byteLength)</span></span><br><span class="line">    wx.writeBLECharacteristicValue(&#123;</span><br><span class="line">      deviceId: app.BLEInformation.deviceId,</span><br><span class="line">      serviceId: app.BLEInformation.writeServiceId,</span><br><span class="line">      characteristicId: app.BLEInformation.writeCharaterId,</span><br><span class="line">      value: buf,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPrint == printNum) &#123;</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            title: <span class="string">&#x27;已打印第&#x27;</span> + currentPrint + <span class="string">&#x27;张成功&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(res)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">&#x27;打印第&#x27;</span> + currentPrint + <span class="string">&#x27;张失败&#x27;</span>,</span><br><span class="line">          icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//console.log(e)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        currentTime++</span><br><span class="line">        <span class="keyword">if</span> (currentTime &lt;= loopTime) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            currentTime: currentTime</span><br><span class="line">          &#125;)</span><br><span class="line">          that.Send(buff)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// wx.showToast(&#123;</span></span><br><span class="line">          <span class="comment">//   title: &#x27;已打印第&#x27; + currentPrint + &#x27;张&#x27;,</span></span><br><span class="line">          <span class="comment">// &#125;)`</span></span><br><span class="line">          <span class="keyword">if</span> (currentPrint == printNum) &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              looptime: <span class="number">0</span>,</span><br><span class="line">              lastData: <span class="number">0</span>,</span><br><span class="line">              currentTime: <span class="number">1</span>,</span><br><span class="line">              isLabelSend: <span class="literal">false</span>,</span><br><span class="line">              currentPrint: <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentPrint++</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              currentPrint: currentPrint,</span><br><span class="line">              currentTime: <span class="number">1</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">            that.Send(buff)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      aypId: options.aypId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// 获取蓝牙设备状态是否可用</span></span><br><span class="line">    wx.getBluetoothAdapterState(&#123;</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.available === <span class="literal">true</span>) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            blueToothConnect: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            blueToothConnect: <span class="literal">false</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="function"><span class="title">fail</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err.errCode!==<span class="number">0</span>&amp;&amp;err.errCode!==-<span class="number">1</span>)&#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            blueToothConnect: <span class="literal">false</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            blueToothConnect: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 监听蓝牙设备状态是否可用</span></span><br><span class="line">    wx.onBluetoothAdapterStateChange(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (res.available === <span class="literal">true</span>) &#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          blueToothConnect: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          blueToothConnect: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.getList(<span class="built_in">this</span>.handleCreateBarCode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获得上一个页面中的路由</span><br><span class="line">   var that &#x3D; this;</span><br><span class="line">   let pages &#x3D; getCurrentPages();</span><br><span class="line">   let currPage &#x3D; null;</span><br><span class="line">   if (pages.length) &#123;</span><br><span class="line">     currPage &#x3D; pages[pages.length - 2];</span><br><span class="line">   &#125;</span><br><span class="line">   let route &#x3D; currPage.route</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;小程序打印的示例&quot;&gt;&lt;a href=&quot;#小程序打印的示例&quot; class=&quot;headerlink&quot; title=&quot;小程序打印的示例&quot;&gt;&lt;/a&gt;小程序打印的示例&lt;/h3&gt;&lt;p&gt;需求是小程序通过蓝牙连接打印所需要的的东西，具体实现主要包括两步：&lt;/p&gt;
&lt;p&gt;1.蓝牙连</summary>
      
    
    
    
    <category term="小程序" scheme="http://example.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
</feed>
